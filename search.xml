<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Elasticsearch安装以及配置</title>
      <link href="/yunpumian/2021/08/22/Elasticsearch%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/yunpumian/2021/08/22/Elasticsearch%E5%AE%89%E8%A3%85%E5%8F%8A%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="Elasticsearch安装以及配置"><a href="#Elasticsearch安装以及配置" class="headerlink" title="Elasticsearch安装以及配置"></a>Elasticsearch安装以及配置</h2><h2 id="1、Elasticsearch-概述"><a href="#1、Elasticsearch-概述" class="headerlink" title="1、Elasticsearch 概述"></a><strong>1、Elasticsearch 概述</strong></h2><p>​    Elasticsearch 是一个实时的分布式搜索分析引擎， 它能让你以一个之前从未有过的速度和规模，去探索你的数据。 它被用作全文检索、结构化搜索、分析以及这三个功能的组合；</p><h2 id="2、Elasticsearch-的用途是什么？"><a href="#2、Elasticsearch-的用途是什么？" class="headerlink" title="2、Elasticsearch 的用途是什么？"></a>2、Elasticsearch 的用途是什么？</h2><p>Elasticsearch 在速度和可扩展性方面都表现出色，而且还能够索引多种类型的内容，这意味着其可用于多种用例：</p><ul><li>应用程序搜索</li><li>网站搜索</li><li>企业搜索</li><li>日志处理和分析</li><li>基础设施指标和容器监测</li><li>应用程序性能监测</li><li>地理空间数据分析和可视化</li><li>安全分析</li><li>业务分析</li></ul><h2 id="3、Elasticsearch-的工作原理是什么？"><a href="#3、Elasticsearch-的工作原理是什么？" class="headerlink" title="3、Elasticsearch 的工作原理是什么？"></a>3、Elasticsearch 的工作原理是什么？</h2><p>原始数据会从多个来源（包括日志、系统指标和网络应用程序）输入到 Elasticsearch 中。<em>数据采集</em>指在 Elasticsearch 中进行<em>索引</em>之前解析、标准化并充实这些原始数据的过程。这些数据在 Elasticsearch 中索引完成之后，用户便可针对他们的数据运行复杂的查询，并使用聚合来检索自身数据的复杂汇总。在 Kibana 中，用户可以基于自己的数据创建强大的可视化，分享仪表板，并对 Elastic Stack 进行管理。</p><h2 id="4、Elasticsearch-索引是什么？"><a href="#4、Elasticsearch-索引是什么？" class="headerlink" title="4、Elasticsearch 索引是什么？"></a>4、Elasticsearch 索引是什么？</h2><p>Elasticsearch <em>索引</em>指相互关联的文档集合。Elasticsearch 会以 JSON 文档的形式存储数据。每个文档都会在一组<em>键</em>（字段或属性的名称）和它们对应的值（字符串、数字、布尔值、日期、<em>数值</em>组、地理位置或其他类型的数据）之间建立联系。</p><p>Elasticsearch 使用的是一种名为<em>倒排索引</em>的数据结构，这一结构的设计可以允许十分快速地进行全文本搜索。倒排索引会列出在所有文档中出现的每个特有词汇，并且可以找到包含每个词汇的全部文档。</p><p>在索引过程中，Elasticsearch 会存储文档并构建倒排索引，这样用户便可以近实时地对文档数据进行搜索。索引过程是在索引 API 中启动的，通过此 API 您既可向特定索引中添加 JSON 文档，也可更改特定索引中的 JSON 文档。</p><h2 id="5、Kibana-的用途是什么？"><a href="#5、Kibana-的用途是什么？" class="headerlink" title="5、Kibana 的用途是什么？"></a>5、Kibana 的用途是什么？</h2><p>Kibana 是一款适用于 Elasticsearch 的数据可视化和管理工具，可以提供实时的直方图、线形图、饼状图和地图。Kibana 同时还包括诸如 Canvas 和 Elastic Maps 等高级应用程序；Canvas 允许用户基于自身数据创建定制的动态信息图表，而 Elastic Maps 则可用来对地理空间数据进行可视化。</p><h2 id="6、Elasticsearch-的配置"><a href="#6、Elasticsearch-的配置" class="headerlink" title="6、Elasticsearch 的配置"></a>6、Elasticsearch 的配置</h2><p>1、Elasticsearch 必须为其专门配置一个用户，不能在root用户下使用</p><h4 id="否则会报：org-elasticsearch-bootstrap-StartupException-java-lang-RuntimeException-can-not-run-elasticsearch-as-root"><a href="#否则会报：org-elasticsearch-bootstrap-StartupException-java-lang-RuntimeException-can-not-run-elasticsearch-as-root" class="headerlink" title="否则会报：org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root"></a>否则会报：org.elasticsearch.bootstrap.StartupException: java.lang.RuntimeException: can not run elasticsearch as root</h4><p>如果启动成功，根据外网访问不能访问成功，先查看服务器端口是否打开，或者防火墙没有打开；</p><p>访问9200端口，如果还是不可以访问，可以用nginx配反向代理，访问该端口；如果出现Elasticsearch 的配置信息；则表示安装成功；</p><h2 id="7、Kibana的安装和配置"><a href="#7、Kibana的安装和配置" class="headerlink" title="7、Kibana的安装和配置"></a>7、Kibana的安装和配置</h2><p>下载kibana，配置相应的Elasticsearch服务器地址，端口等基本配置；</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue生命周期</title>
      <link href="/yunpumian/2021/08/22/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/yunpumian/2021/08/22/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Vue的钩子函数"><a href="#1、Vue的钩子函数" class="headerlink" title="1、Vue的钩子函数"></a>1、Vue的钩子函数</h2><ul><li><strong>beforeCreate</strong></li><li><strong>created</strong></li><li><strong>beforeMount</strong></li><li><strong>mounted</strong></li><li><strong>beforeUpdate</strong></li><li><strong>updated</strong></li><li><strong>beforeDestroy</strong></li><li><strong>destroyed</strong></li></ul><h3 id="1-1、beforeCreate-创建前"><a href="#1-1、beforeCreate-创建前" class="headerlink" title="1.1、beforeCreate( 创建前 )"></a>1.1、beforeCreate( 创建前 )</h3><p>在实例初始化之后，数据观测和事件配置之前被调用，此时组件的选项对象还未创建，el 和 data 并未初始化，因此无法访问methods， data， computed等上的方法和数据。</p><h3 id="1-2、created-创建后"><a href="#1-2、created-创建后" class="headerlink" title="1.2、created(创建后)"></a>1.2、created(创建后)</h3><p>实例已经创建完成之后被调用，在这一步，实例已完成以下配置：数据观测、属性和方法的运算，watch/event事件回调，完成了data 数据的初始化，el没有。 然而，挂在阶段还没有开始, $el属性目前不可见，这是一个常用的生命周期，因为你可以调用methods中的方法，改变data中的数据，并且修改可以通过vue的响应式绑定体现在页面上，，获取computed中的计算属性等等，通常我们可以在这里对实例进行预处理，也有一些童鞋喜欢在这里发ajax请求，值得注意的是，这个周期中是没有什么方法来对实例化过程进行拦截的，因此假如有某些数据必须获取才允许进入页面的话，并不适合在这个方法发请求，建议在组件路由钩子beforeRouteEnter中完成</p><h3 id="1-3、beforeMount"><a href="#1-3、beforeMount" class="headerlink" title="1.3、beforeMount"></a>1.3、beforeMount</h3><p>挂在开始之前被调用，相关的render函数首次被调用（虚拟DOM），实例已完成以下的配置： 编译模板，把data里面的数据和模板生成html，完成了el和data 初始化，注意此时还没有挂在html到页面上</p><h3 id="1-4、mounted"><a href="#1-4、mounted" class="headerlink" title="1.4、mounted"></a>1.4、mounted</h3><p>挂在完成，也就是模板中的HTML渲染到HTML页面中，此时一般可以做一些ajax操作，mounted只会执行一次。</p><h3 id="1-5、beforeUpdate（更新前）"><a href="#1-5、beforeUpdate（更新前）" class="headerlink" title="1.5、beforeUpdate（更新前）"></a>1.5、beforeUpdate（更新前）</h3><p>在数据更新之前被调用，发生在虚拟DOM重新渲染和打补丁之前，可以在该钩子中进一步地更改状态，不会触发附加地重渲染过程</p><h3 id="1-6、updated（更新后）"><a href="#1-6、updated（更新后）" class="headerlink" title="1.6、updated（更新后）"></a>1.6、updated（更新后）</h3><p>在由于数据更改导致地虚拟DOM重新渲染和打补丁只会调用，调用时，组件DOM已经更新，所以可以执行依赖于DOM的操作，然后在大多是情况下，应该避免在此期间更改状态，因为这可能会导致更新无限循环，该钩子在服务器端渲染期间不被调用</p><h3 id="1-7、beforeDestroy（销毁前）"><a href="#1-7、beforeDestroy（销毁前）" class="headerlink" title="1.7、beforeDestroy（销毁前）"></a>1.7、beforeDestroy（销毁前）</h3><p>在实例销毁之前调用，实例仍然完全可用，</p><ol><li>这一步还可以用this来获取实例，</li><li>一般在这一步做一些重置的操作，比如清除掉组件中的定时器  和 监听的dom事件</li></ol><h3 id="1-8、destroyed（销毁后）"><a href="#1-8、destroyed（销毁后）" class="headerlink" title="1.8、destroyed（销毁后）"></a>1.8、destroyed（销毁后）</h3><p>在实例销毁之后调用，调用后，所以的事件监听器会被移出，所有的子实例也会被销毁，该钩子在服务器端渲染期间不被调用</p><h3 id="1-1-1、在beforeCreate和created钩子函数之间的生命周期"><a href="#1-1-1、在beforeCreate和created钩子函数之间的生命周期" class="headerlink" title="1.1.1、在beforeCreate和created钩子函数之间的生命周期"></a>1.1.1、<strong>在beforeCreate和created钩子函数之间的生命周期</strong></h3><p>在这个生命周期之间，进行<strong>初始化事件，进行数据的观测</strong>，可以看到在<strong>created</strong>的时候数据已经和<strong>data属性进行绑定</strong>（放在data中的属性当值发生改变的同时，视图也会改变）。</p><h2 id="2、vue的生命周期是什么"><a href="#2、vue的生命周期是什么" class="headerlink" title="2、vue的生命周期是什么"></a><strong>2、vue的生命周期是什么</strong></h2><p>  vue每个组件都是独立的，每个组件都有一个属于它的生命周期，从一个组件<strong>创建、数据初始化、挂载、更新、销毁</strong>，这就是一个组件所谓的生命周期。在组件中具体的方法有:</p><p>  beforeCreate</p><p>  created</p><p>  beforeMount</p><p>  mounted</p><p>  (</p><p>​     beforeUpdate</p><p>​     updated</p><p>   )</p><p>  beforeDestroy</p><p>  destroyed</p><h2 id="3、Vue的变异方法"><a href="#3、Vue的变异方法" class="headerlink" title="3、Vue的变异方法"></a>3、Vue的变异方法</h2><p><strong>Vue 包含一组观察数组的变异方法，变异方法 (mutation method)，顾名思义，会改变被这些方法调用的原始数组</strong></p><p><strong>所以它们也将会触发视图更新。这些方法如下：</strong></p><ul><li><strong><code>push()</code></strong></li><li><strong><code>pop()</code></strong></li><li><strong><code>shift()</code></strong></li><li><strong><code>unshift()</code></strong></li><li><strong><code>splice()</code></strong></li><li><strong><code>sort()</code></strong></li><li><strong><code>reverse()</code></strong></li></ul><p>变异方法</p><p>push() 接收任意数量的参数，把它们逐个添加到数组末尾，并返回修改后数组的长度</p><p>pop() 从数组末尾移除最后一项，减少数组的length值，然后返回移除的项</p><p>shift() 移除数组中的第一个项并返回该项，同时数组的长度减1</p><p>unshift() 在数组前端添加任意个项并返回新数组长度</p><p>splice() 删除原数组的一部分成员，并可以在被删除的位置添加入新的数组成员</p><p>sort() 调用每个数组项的toString()方法，然后比较得到的字符串排序，返回经过排序之后的数组</p><p>reverse() 用于反转数组的顺序，返回经过排序之后的数组</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx负载均衡策略</title>
      <link href="/yunpumian/2021/08/18/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/"/>
      <url>/yunpumian/2021/08/18/Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1、Nginx的负载均衡"><a href="#1、Nginx的负载均衡" class="headerlink" title="1、Nginx的负载均衡"></a>1、Nginx的负载均衡</h2><p>Nginx提供的负载均衡策略有2种：</p><p>内置策略和扩展策略。</p><p>内置策略为轮询，加权轮询，Ip hash。</p><p>扩展策略，参照所有的负载均衡算法实现。</p><h6 id="Ip-hash算法：对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。"><a href="#Ip-hash算法：对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。" class="headerlink" title="Ip hash算法：对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。"></a>Ip hash算法：对客户端请求的ip进行hash操作，然后根据hash结果将同一个客户端ip的请求分发给同一台服务器进行处理，可以解决session不共享的问题。</h6><h2 id="2、常见配置情形"><a href="#2、常见配置情形" class="headerlink" title="2、常见配置情形"></a>2、常见配置情形</h2><p>1、热备：如果你有2台服务器，当一台服务器发生事故时，才启用第二台服务器给提供服务。服务器处理请求的顺序：AAAAAA突然A挂啦，BBBBBBBBBBBBBB…..</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123; </span><br><span class="line">    server 127.0.0.1:7878; </span><br><span class="line">    server 192.168.10.121:3333 backup;  #热备     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、轮询：nginx默认就是轮询其权重都默认为1，服务器处理请求的顺序：ABABABABAB….</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123; </span><br><span class="line">    server 127.0.0.1:7878;</span><br><span class="line">    server 192.168.10.121:3333;       </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、加权轮询：跟据配置的权重的大小而分发给不同服务器不同数量的请求。如果不设置，则默认为1。下面服务器的请求顺序为：ABBABBABBABBABB….</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123; </span><br><span class="line">    server 127.0.0.1:7878 weight=1;</span><br><span class="line">    server 192.168.10.121:3333 weight=2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、ip_hash: Nginx会让相同的客户端Ip请求相同的服务器。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123; </span><br><span class="line">    server 127.0.0.1:7878; </span><br><span class="line">    server 192.168.10.121:3333;</span><br><span class="line">    ip_hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、Nginx负载均衡配置的几个状态参数"><a href="#3、Nginx负载均衡配置的几个状态参数" class="headerlink" title="3、Nginx负载均衡配置的几个状态参数"></a>3、Nginx负载均衡配置的几个状态参数</h2><ul><li>down，表示当前的server暂时不参与负载均衡。</li><li>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</li><li>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</li><li>fail_timeout，在经历了max_fails次失败后，暂停服务的时间。max_fails可以和fail_timeout一起使用。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream mysvr &#123; </span><br><span class="line">    server 127.0.0.1:7878 weight=2 max_fails=2 fail_timeout=2;</span><br><span class="line">    server 192.168.10.121:3333 weight=1 max_fails=2 fail_timeout=1;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx反向代理</title>
      <link href="/yunpumian/2021/08/18/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
      <url>/yunpumian/2021/08/18/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="1、什么是代理"><a href="#1、什么是代理" class="headerlink" title="1、什么是代理"></a>1、什么是代理</h2><p>在Java设计模式中，代理模式是这样定义的：给某个对象提供一个代理对象，并由代理对象控制原对象的引用。</p><p>　　可能大家不太明白这句话，在举一个现实生活中的例子：比如我们要买一间二手房，虽然我们可以自己去找房源，但是这太花费时间精力了，而且房屋质量检测以及房屋过户等一系列手续也都得我们去办，再说现在这个社会，等我们找到房源，说不定房子都已经涨价了，那么怎么办呢？最简单快捷的方法就是找二手房中介公司（为什么？别人那里房源多啊），于是我们就委托中介公司来给我找合适的房子，以及后续的质量检测过户等操作，我们只需要选好自己想要的房子，然后交钱就行了。</p><p>　　代理简单来说，就是如果我们想做什么，但又不想直接去做，那么这时候就找另外一个人帮我们去做。那么这个例子里面的中介公司就是给我们做代理服务的，我们委托中介公司帮我们找房子。</p><h2 id="2、正向代理"><a href="#2、正向代理" class="headerlink" title="2、正向代理"></a>2、正向代理</h2><p>  大家都知道，现在国内是访问不了 Google的，那么怎么才能访问 Google呢？我们又想，美国人不是能访问 Google吗（这不废话，Google就是美国的），如果我们电脑的对外公网 IP 地址能变成美国的 IP 地址，那不就可以访问 Google了。你很聪明，VPN 就是这样产生的。我们在访问 Google 时，先连上 VPN 服务器将我们的 IP 地址变成美国的 IP 地址，然后就可以顺利的访问了。</p><p>　　这里的 VPN 就是做正向代理的。正向代理服务器位于客户端和服务器之间，为了向服务器获取数据，客户端要向代理服务器发送一个请求，并指定目标服务器，代理服务器将目标服务器返回的数据转交给客户端。这里客户端是要进行一些正向代理的设置的。</p><h2 id="3、反向代理"><a href="#3、反向代理" class="headerlink" title="3、反向代理"></a>3、反向代理</h2><p>反向代理和正向代理的区别就是：<strong>正向代理代理客户端，反向代理代理服务器。</strong></p><p>反向代理，其实客户端对代理是无感知的，因为客户端不需要任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，暴露的是代理服务器地址，隐藏了真实服务器IP地址。</p><p>理解这两种代理的关键在于代理服务器所代理的对象是什么，正向代理代理的是客户端，我们需要在客户端进行一些代理的设置。而反向代理代理的是服务器，作为客户端的我们是无法感知到服务器的真实存在的。</p><p>总结起来还是一句话：<strong>正向代理代理客户端，反向代理代理服务器。</strong></p><h2 id="4、使用Nginx反向代理"><a href="#4、使用Nginx反向代理" class="headerlink" title="4、使用Nginx反向代理"></a>4、使用Nginx反向代理</h2><h6 id="1、配置监听地址"><a href="#1、配置监听地址" class="headerlink" title="1、配置监听地址"></a>1、<strong>配置</strong>监听地址</h6><pre><code>   location / &#123;            proxy_pass http://127.0.0.1：8080; //反向代理服务器地址：端口    &#125;    location ~ .*\.(js|css)?$    &#123;        #解决反向代理无法访问js,css        proxy_pass http://127.0.0.1：8080;        proxy_set_header   Host $host;        proxy_set_header X-Real-IP $remote_addr;        proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;        expires      12h;    &#125;        </code></pre><p>配置更改过后需要重启nginx;</p><h2 id="5、Nginx常见配置"><a href="#5、Nginx常见配置" class="headerlink" title="5、Nginx常见配置"></a>5、Nginx常见配置</h2><p>1、设置 404 页面导向地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">error_page 404 https://www.runnob.com; #错误页</span><br><span class="line">proxy_intercept_errors on;    #如果被代理服务器返回的状态码为400或者大于400，设置的error_page配置起作用。默认为off。</span><br></pre></td></tr></table></figure><p>2、如果我们的代理只允许接受get，post请求方法的一种</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_method get;    #支持客户端的请求方法。post/get；</span><br></pre></td></tr></table></figure><p>3、设置支持的http协议版本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_http_version 1.0 ; #Nginx服务器提供代理服务的http协议版本1.0，1.1，默认设置为1.0版本</span><br></pre></td></tr></table></figure><p>4、如果你想通过http获取客户的真实ip而不是获取代理服务器的ip地址，那么要做如下的设置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_set_header Host $host; #只要用户在浏览器中访问的域名绑定了 VIP VIP 下面有RS；则就用$host ；host是访问URL中的域名和端口  www.taobao.com:80</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;  #把源IP 【$remote_addr,建立HTTP连接header里面的信息】赋值给X-Real-IP;这样在代码中 $X-Real-IP来获取 源IP</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;#在nginx 作为代理服务器时，设置的IP列表，会把经过的机器ip，代理机器ip都记录下来，用 【，】隔开；代码中用 echo $x-forwarded-for |awk -F, &#x27;&#123;print $1&#125;&#x27; 来作为源IP</span><br></pre></td></tr></table></figure><p>5、代理配置的配置文件部分，仅供参考。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">#access_log off; #取消服务日志    </span><br><span class="line">log_format myFormat &#x27; $remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&#x27;; #自定义格式</span><br><span class="line">access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line">proxy_connect_timeout 1;   #nginx服务器与被代理的服务器建立连接的超时时间，默认60秒</span><br><span class="line">proxy_read_timeout 1; #nginx服务器想被代理服务器组发出read请求后，等待响应的超时间，默认为60秒。</span><br><span class="line">proxy_send_timeout 1; #nginx服务器想被代理服务器组发出write请求后，等待响应的超时间，默认为60秒。</span><br><span class="line">proxy_http_version 1.0 ; #Nginx服务器提供代理服务的http协议版本1.0，1.1，默认设置为1.0版本。</span><br><span class="line">#proxy_method get;    #支持客户端的请求方法。post/get；</span><br><span class="line">proxy_ignore_client_abort on;  #客户端断网时，nginx服务器是否终端对被代理服务器的请求。默认为off。</span><br><span class="line">proxy_ignore_headers &quot;Expires&quot; &quot;Set-Cookie&quot;;  #Nginx服务器不处理设置的http相应投中的头域，这里空格隔开可以设置多个。</span><br><span class="line">proxy_intercept_errors on;    #如果被代理服务器返回的状态码为400或者大于400，设置的error_page配置起作用。默认为off。</span><br><span class="line">proxy_headers_hash_max_size 1024; #存放http报文头的哈希表容量上限，默认为512个字符。</span><br><span class="line">proxy_headers_hash_bucket_size 128; #nginx服务器申请存放http报文头的哈希表容量大小。默认为64个字符。</span><br><span class="line">proxy_next_upstream timeout;  #反向代理upstream中设置的服务器组，出现故障时，被代理服务器返回的状态值。error|timeout|invalid_header|http_500|http_502|http_503|http_504|http_404|off</span><br><span class="line">#proxy_ssl_session_reuse on; 默认为on，如果我们在错误日志中发现“SSL3_GET_FINSHED:digest check failed”的情况时，可以将该指令设置为off。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TX-LCN分布式事务使用方案</title>
      <link href="/yunpumian/2021/08/16/TX-LCN%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88/"/>
      <url>/yunpumian/2021/08/16/TX-LCN%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1%E4%BD%BF%E7%94%A8%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h4 id="1-分布式事务是什么？"><a href="#1-分布式事务是什么？" class="headerlink" title="1. 分布式事务是什么？"></a><strong>1. 分布式事务是什么？</strong></h4><p>在分布式系统中，事务参与者在不同的分布式节点上或事务操作的数据源不是同一个，这些情况产生的事务都叫做分布式事务。</p><p>例如：</p><p>项目A实现user表新增、项目B实现role新增，现在需要实现用户权限新增，需要把项目A和项目B两个项目新增的方法组成一个事务，这个事务就是分布式事务。</p><p>项目中向MySQL做新增，同时还需要向Redis或MongoDB执行新增，希望执行MySQL或Redis或MongoDB时如果出现异常进行事务回滚，这种情况也成为分布式事务。</p><h4 id="2-什么是事务"><a href="#2-什么是事务" class="headerlink" title="2.什么是事务"></a>2.什么是事务</h4><p>一个事务（本地事务）就是一系列SQL语句的集合，只要在执行过程中一条SQL出错就会导致整个事务失败，回滚到原点。而在分布式系统中存在多模块完成一次业务。那么就存在一个业务由多模块操作同一个数据源。</p><h4 id="3-分布式事务常见解决方案"><a href="#3-分布式事务常见解决方案" class="headerlink" title="3. 分布式事务常见解决方案"></a><strong>3. 分布式事务常见解决方案</strong></h4><p><strong>3.1 基于XA协议的两阶段提交</strong></p><p>分布式事务通常采用2PC协议，全称Two Phase Commitment Protocol。该协议主要为了解决在分布式数据库场景下，所有节点间数据一致性的问题。分布式事务通过2PC协议将提交分成两个阶段：</p><ol><li>prepare</li><li>commit/rollback</li></ol><p>阶段一为准备（prepare）阶段。即所有的参与者准备执行事务并锁住需要的资源。参与者ready时，向transaction manager报告已准备就绪。</p><p>阶段二为提交阶段（commit）。当transaction manager确认所有参与者都ready后，向所有参与者发送commit命令。</p><p><strong>3.2 消息事务+最终一致性</strong></p><p>所谓的消息事务就是基于消息中间件的两阶段提交，本质上是对消息中间件的一种特殊利用，它是将本地事务和发消息放在了一个分布式事务里，保证要么本地操作成功并且对外发消息成功，要么两者都失败</p><p>分布式事务，本质上是对多个数据库的事务进行统一控制，按照控制力度可以分为：不控制、部分控制和完全控制。不控制就是不引入分布式事务，部分控制就是各 种变种的两阶段提交，包括上面提到的消息事务+最终一致性、TCC模式，而完全控制就是完全实现两阶段提交。部分控制的好处是并发量和性能很好，缺点是数 据一致性减弱了，完全控制则是牺牲了性能，保障了一致性，具体用哪种方式，最终还是取决于业务场景。</p><h4 id="4-TX-LCN概述"><a href="#4-TX-LCN概述" class="headerlink" title="4.TX-LCN概述"></a>4.<strong>TX-LCN概述</strong></h4><h5 id="4-1-简介"><a href="#4-1-简介" class="headerlink" title="4.1. 简介**"></a>4.1. 简介**</h5><ul><li><p>1）锁定事务单元（Lock）</p></li><li><p>2）确认事务模块状态（Confirm）</p></li><li><p>3）通知事务（Notify）</p></li><li><p>LCN框架从5.0开始兼容了LCN、TCC、TXC三种事务模式，为了和LCN框架区分，从5.0开始把LCN框架更名为：TX-LCN分布式事务框架。</p><h5 id="4-2-TX-LCN由两大模块组成，"><a href="#4-2-TX-LCN由两大模块组成，" class="headerlink" title="4.2.TX-LCN由两大模块组成，"></a>4.2.TX-LCN由两大模块组成，</h5><h5 id="TxClient、TxManager"><a href="#TxClient、TxManager" class="headerlink" title="TxClient、TxManager"></a>TxClient、TxManager</h5></li></ul><p>TxClient作为模块的依赖框架，提供了TX-LCN的标准支持，事务发起方和参与方都属于TxClient。</p><p>TxManager作为分布式事务的控制方，控制整个事务。</p><p>核心步骤<br>创建事务组<br>是指在事务发起方开始执行业务代码之前先调用TxManager创建事务组对象，然后拿到事务标示GroupId的过程。<br>添加事务组<br>添加事务组是指参与方在执行完业务方法以后，将该模块的事务信息添加通知给TxManager的操作。<br>关闭事务组<br>是指在发起方执行完业务代码以后，将发起方执行结果状态通知给TxManager的动作。当执行完关闭事务组的方法以后，TxManager将根据事务组信息来通知相应的参与模块提交或回滚事务。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java8解决空指针</title>
      <link href="/yunpumian/2021/06/20/Java8%E8%A7%A3%E5%86%B3%E7%A9%BA%E6%8C%87%E9%92%88/"/>
      <url>/yunpumian/2021/06/20/Java8%E8%A7%A3%E5%86%B3%E7%A9%BA%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h1 id="Optional"><a href="#Optional" class="headerlink" title="Optional:"></a>Optional:</h1><p>Optional(T value),empty(),of(T value),ofNullable(T value):</p><p>Optional(T value)，即构造函数，它是private权限的，不能由外部调用的。其余三个函数是public权限，供我们所调用。那么，Optional的本质，就是内部储存了一个真实的值，在构造的时候，就直接判断其值是否为空</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/yunpumian/2021/06/20/Vue%E7%AC%94%E8%AE%B0/"/>
      <url>/yunpumian/2021/06/20/Vue%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Vue笔记"><a href="#Vue笔记" class="headerlink" title="Vue笔记"></a>Vue笔记</h1><p>Axios:通信</p><p>v-if</p><p>v-else-if</p><p>v-else </p><p>v-for：for遍历，item in items</p><p>v-on 绑定事件 简写为@</p><p>v-model 数据双向绑定</p><p>v-bind 给组件绑定参数，简写 ：</p><p>组合组件slot插槽</p><p>组件内部绑定事件需要使用到this.$emit(‘事件名’，参数)</p><p>计算属性的特色，缓存计算</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RBAC权限认证模型</title>
      <link href="/yunpumian/2021/06/10/RBAC%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9E%8B/"/>
      <url>/yunpumian/2021/06/10/RBAC%E6%9D%83%E9%99%90%E8%AE%A4%E8%AF%81%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="RBAC是什么？"><a href="#RBAC是什么？" class="headerlink" title="RBAC是什么？"></a>RBAC是什么？</h1><p><a href="http://www.sojson.com/tag_rbac.html">RBAC </a>是基于角色的访问控制（<code>Role-Based Access Control</code> ）在<a href="http://www.sojson.com/tag_rbac.html"> RBAC </a>中，权限与角色相关联，用户通过成为适当角色的成员而得到这些角色的权限。这就极大地简化了权限的管理。这样管理都是层级相互依赖的，权限赋予给角色，而把角色又赋予用户，这样的权限设计很清楚，管理起来很方便</p><h1 id="RBAC介绍。"><a href="#RBAC介绍。" class="headerlink" title="RBAC介绍。"></a>RBAC介绍。</h1><p><a href="http://www.sojson.com/tag_rbac.html">RBAC </a>认为授权实际上是<code>Who</code> 、<code>What</code> 、<code>How</code> 三元组之间的关系，也就是<code>Who</code> 对<code>What</code> 进行<code>How</code> 的操作，也就是“主体”对“客体”的操作。</p><p><strong>Who：是权限的拥有者或主体（如：User，Role）。</strong></p><p><strong>What：是操作或对象（operation，object）。</strong></p><p><strong>How：具体的权限（Privilege,正向授权与负向授权）。</strong></p><p>SpringSecurity如果认证成功，但是报405,不支持post方法。要将认证成功跳转后的请求写一个控制层.@RequestMapping;</p><p>RBAC代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wn.guanjiapo.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wn.guanjiapo.config.GlobalExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> com.wn.guanjiapo.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.wn.guanjiapo.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.wn.guanjiapo.service.RbacService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.access.AccessDeniedException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.security.core.Authentication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.AntPathMatcher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> :wn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span> : guanjiapo</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descript</span> :</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> :2021-06-10 09:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component(&quot;rbacService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RbacServiceImpl</span> <span class="keyword">implements</span> <span class="title">RbacService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPermission</span><span class="params">(HttpServletRequest request, Authentication authentication)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Object principal = authentication.getPrincipal();</span><br><span class="line">        <span class="keyword">boolean</span> hasPermission = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(principal!=<span class="keyword">null</span> &amp;&amp; principal <span class="keyword">instanceof</span> User) &#123;</span><br><span class="line">            String username = ((User) principal).getUsername();</span><br><span class="line">            Set&lt;String&gt; urls = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">            User user = userMapper.chaXunByUserName(username);</span><br><span class="line">            <span class="keyword">if</span>(user.equals(<span class="keyword">null</span>))&#123;</span><br><span class="line">                <span class="keyword">new</span> GlobalExceptionHandler().handleAccessException(<span class="keyword">new</span> AccessDeniedException(<span class="string">&quot;权限不够&quot;</span>),(Model) <span class="keyword">new</span> ModelAndView(<span class="string">&quot;/error&quot;</span>));</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                urls.add(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String url : urls) &#123;</span><br><span class="line">                <span class="keyword">if</span> (antPathMatcher.match(url, request.getRequestURI()))&#123;</span><br><span class="line">                    hasPermission=<span class="keyword">true</span>;</span><br><span class="line">                    System.out.println(url+request.getRequestURI());</span><br><span class="line">                    System.out.println(hasPermission);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    hasPermission=<span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> hasPermission;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SpringSecurity解决界面嵌套问题：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.headers().frameOptions().disable();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL笔记3</title>
      <link href="/yunpumian/2021/06/10/MySQL%E7%AC%94%E8%AE%B03/"/>
      <url>/yunpumian/2021/06/10/MySQL%E7%AC%94%E8%AE%B03/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL笔记"><a href="#MySQL笔记" class="headerlink" title="MySQL笔记"></a>MySQL笔记</h1><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是虚拟的表。与包含数据的表不一样，视图只包含使用时动态检索数据的查询；</p><p>为什么使用视图：</p><p>1.重用SQL语句；</p><p>2.简化复杂的SQL操作。在编写查询后，可以方便地重用它而不必知道它的基本查询细节</p><p>3.使用表的组成部分而不是整个表</p><p>4.保护数据，可以给用户授予表的特定部分的访问权限而不是整个表的访问权限</p><p>5.更改数据格式和表示，视图可返回与底层表的表示和格式不同的数据；</p><p>在视图创建之后，可以用与表基本相同的方式利用发、它们，可以对视图执行SELECT操作，过滤和排序数据，将视图联结到其他视图或表，甚 至能添加和更新数据</p><p>性能问题 因为视图不包含数据，所以每次使用视图时，都 必须处理查询执行时所需的任一个检索。如果你用多个联结 和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能 下降得很厉害。</p><p><strong>视图创建和使用的一些最常见的规则和限制。</strong></p><p>1.与表一样，视图必须唯一命名（不能给视图取与别的视图或表相 同的名字）。</p><p>2.对于可以创建的视图数目没有限制。</p><p>3.为了创建视图，必须具有足够的访问权限。这些限制通常由数据 库管理人员授予。</p><p>4.视图可以嵌套，即可以利用从其他视图中检索数据的查询来构造 一个视图。</p><p>5.ORDER BY可以用在视图中，但如果从该视图检索数据SELECT中也 含有ORDER BY，那么该视图中的ORDER BY将被覆盖。</p><p>6.视图不能索引，也不能有关联的触发器或默认值。</p><p>7.视图可以和表一起使用。例如，编写一条联结表和视图的SELECT 语句。</p><p>使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MYSQL笔记2</title>
      <link href="/yunpumian/2021/06/05/MySQL%E7%AC%94%E8%AE%B02/"/>
      <url>/yunpumian/2021/06/05/MySQL%E7%AC%94%E8%AE%B02/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL笔记："><a href="#MySQL笔记：" class="headerlink" title="MySQL笔记："></a>MySQL笔记：</h1><h2 id="InnoDB存储引擎："><a href="#InnoDB存储引擎：" class="headerlink" title="InnoDB存储引擎："></a>InnoDB存储引擎：</h2><p>支持事务，其特点是行锁设计、支持外键，并支持类似Oracle的非锁定读，即默认读取操作不会产生锁。InnoDB存储引擎将数据放在一个逻辑的表空间中，这个表空间就像黑盒一样由InnoDB存储引擎自身来管理。</p><p>InnoDB存储引擎采用了聚集的方式，每张表都是按主键的顺序进行存储的，如果没有显式地在表定义时指定主键，InooDB存储引擎会为每一行生成一个6字节的ROWID,并以此作为主键。</p><h2 id="MyISAM存储引擎："><a href="#MyISAM存储引擎：" class="headerlink" title="MyISAM存储引擎："></a>MyISAM存储引擎：</h2><p>不支持事务、表锁设计、支持全文索引</p><h2 id="NDB存储引擎"><a href="#NDB存储引擎" class="headerlink" title="NDB存储引擎"></a>NDB存储引擎</h2><p>主键查找的速度极快</p><h2 id="Memory存储引擎"><a href="#Memory存储引擎" class="headerlink" title="Memory存储引擎"></a>Memory存储引擎</h2><p>数据存在内存中，数据库重启或者发生崩溃，表的数据都将消失，一般用作存放临时数据；</p><p>insert into  select语句：eg: insert into t select 1,2; 其中t有两个字段 int类型。(a,b);</p><p>在MySQL的sql语句后加上<code>\G</code>，表示将查询结果进行按列打印，可以使每个字段打印到单独的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t\G</span><br><span class="line"></span><br><span class="line">输出：a:<span class="number">1</span></span><br><span class="line"> b:<span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日期数据类型"><a href="#日期数据类型" class="headerlink" title="日期数据类型"></a>日期数据类型</h2><p>DATETIME ——————8字节</p><p>DATE          ——————3字节</p><p>TIMESTAMP——————4字节</p><p>YEAR            ——————1字节</p><p>TIME            ——————3字节</p><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>特性：ACID</p><p>A:原子性</p><p>C:一致性</p><p>I:隔离性</p><p>D:持久性：事务一旦提交，其结果就是永久性的</p><h2 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h2><p>不能部分使用distinct,distinct关键字应用于所有列而 不仅是前置它的列。如果给出SELECT DISTINCT vend_id,  prod_price，除非指定的两个列都不同，否则所有行都将被 检索出来</p><h2 id="Limit"><a href="#Limit" class="headerlink" title="Limit"></a>Limit</h2><p>带一个值的Limit总是从第一行开始，给出的数为返回的行数。 带两个值的Limit可以指定从行号为第一个值的位置开始。在行数不够时 Limit中指定要检索的行数为检索的最大行 数。如果没有足够的行（例如，给出Limit 10, 5，但只有13 行），MySQL将只返回它能返回的那么多行。MySQL 5的Limit 语法 Limit 3, 4的含义是从行4开始的3 行还是从行3开始的4行？如前所述，它的意思是从行3开始的4 行，这容易把人搞糊涂。  由于这个原因，MySQL 5支持Limit 的另一种替代语法。Limit 4 OFFSET 3意为从行3开始取4行，就像LIMIT 3, 4一样。</p><h2 id="Order-By"><a href="#Order-By" class="headerlink" title="Order By"></a>Order By</h2><p>排序默认升序，desc降序</p><p> 如果想在多个列上进行降序排序，必须 对每个列指定DESC关键字</p><h2 id="where字句操作符"><a href="#where字句操作符" class="headerlink" title="where字句操作符"></a>where字句操作符</h2><p>= 等于</p><p> &lt;&gt; 不等于</p><p> != 不等于</p><p> &lt; 小于</p><p> &lt;= 小于等于</p><blockquote><p>“&gt;”大于</p><blockquote><p>‘&gt;=’ 大于等于</p><p> BETWEEN AND 在指定的两个值之间</p></blockquote></blockquote><p>MySQL在执行匹配时默认不区分大小写，所 以fuses与Fuses匹配。</p><p>在使用BETWEEN时，必须指定两个值 ——所需范围的低端值和高端值。这两个值必须用AND关键字 分隔。BETWEEN匹配范围中所有的值，包括指定的开始值和结束值。</p><h2 id="AND和OR"><a href="#AND和OR" class="headerlink" title="AND和OR"></a>AND和OR</h2><p>WHERE可包含任意数目的AND和OR操作符。允许两者结合以进行复杂 和高级的过滤。</p><p>SQL（像多数语言一样）在处理OR操作符前，优先处理AND操 作符。当SQL看到上述WHERE子句时，它理解为由供应商1003制造的任何 价格为10美元（含）以上的产品，或者由供应商1002制造的任何产品， 而不管其价格如何。换句话说，由于AND在计算次序中优先级更高,此问题的解决方法是使用圆括号明确地分组相应的操作符。</p><p>在WHERE子句中使用圆括号 任何时候使用具有AND和OR操作 符的WHERE子句，都应该使用圆括号明确地分组操作符。不要 过分依赖默认计算次序，即使它确实是你想要的东西也是如 此。使用圆括号没有什么坏处，它能消除歧义</p><h2 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h2><p>圆括号在WHERE子句中还有另外一种用法。IN操作符用来指定条件范 围，范围中的每个条件都可以进行匹配。IN取合法值的由逗号分隔的清 单，全都括在圆括号中。</p><p>select * from product where product.Vent_id in(1002,1003)</p><p>此SELECT语句检索供应商1002和1003制造的所有产品。IN和OR可以完成同样的操作</p><p>select *  from product where product.Vent_id =1002 or product_vent_id=1003</p><h3 id="为什么要使用IN操作符？其优点具体如下"><a href="#为什么要使用IN操作符？其优点具体如下" class="headerlink" title="为什么要使用IN操作符？其优点具体如下"></a>为什么要使用IN操作符？其优点具体如下</h3><p>1.在使用长的合法选项清单时，IN操作符的语法更清楚且更直观。</p><p>2.在使用IN时，计算的次序更容易管理（因为使用的操作符更少）。</p><p>3.IN操作符一般比OR操作符清单执行更快。</p><p>4.IN的最大优点是可以包含其他SELECT语句，使得能够更动态地建 立WHERE子句。第14章将对此进行详细介绍</p><h2 id="Not"><a href="#Not" class="headerlink" title="Not"></a>Not</h2><p>WHERE子句中的NOT操作符有且只有一个功能，那就是否定它之后所 跟的任何条件。</p><p>select * from product where product.Vent_id not in (1002,1003);</p><p>对于简单的WHERE子句，使用NOT确实没有什么优 势。但在更复杂的子句中，NOT是非常有用的。例如，在与IN操作符联合 使用时，NOT使找出与条件列表不匹配的行非常简单</p><p>MySQL中的NOT MySQL支持使用NOT对IN、BETWEEN和 EXISTS子句取反，这与多数其他DBMS允许使用NOT对各种条件 取反有很大的差别</p><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><h3 id="Like操作符"><a href="#Like操作符" class="headerlink" title="Like操作符"></a>Like操作符</h3><p>为在搜索子句中使用通配符，必须使用LIKE操作符。LIKE指示MySQL， 后跟的搜索模式利用通配符匹配而不是直接相等匹配进行比较。</p><p>操作符何时不是操作符？答案是在它作为谓词（predi-cate）时。从技术上说，LIKE是谓词而不是操作符。虽然最终 的结果是相同的，但应该对此术语有所了解，以免在SQL文档 中遇到此术语时不知道</p><h3 id="百分号（-）通配符"><a href="#百分号（-）通配符" class="headerlink" title="百分号（%）通配符"></a>百分号（%）通配符</h3><p>最常使用的通配符是百分号（%）。在搜索串中，%表示任何字符出现 任意次数。</p><p>区分大小写 根据MySQL的配置方式，搜索可以是区分大小 写的。如果区分大小写，’jet%’与JetPack 1000将不匹配。</p><p>注意尾空格 尾空格可能会干扰通配符匹配。例如，在保存词 anvil 时，如果它后面有一个或多个空格，则子句WHERE  prod_name LIKE ‘%anvil’将不会匹配它们，因为在最后的l 后有多余的字符。解决这个问题的一个简单的办法是在搜索模 式最后附加一个%。一个更好的办法是使用函数（trim）去掉首尾空格。</p><p>注意NULL 虽然似乎%通配符可以匹配任何东西，但有一个例 外，即NULL。即使是WHERE prod_name LIKE ‘%’也不能匹配 用值NULL作为产品名的行。</p><h3 id="下划线（-）通配符"><a href="#下划线（-）通配符" class="headerlink" title="下划线（_）通配符"></a>下划线（_）通配符</h3><p>下划线的用途与%一样，但下划 线只匹配单个字符而不是多个字符</p><p>与%能匹配0个字符不一样，_总是匹配一个字符，不能多也不能少。</p><h3 id="使用通配符的技巧"><a href="#使用通配符的技巧" class="headerlink" title="使用通配符的技巧"></a>使用通配符的技巧</h3><ol><li>不要过度使用通配符。如果其他操作符能达到相同的目的，应该 使用其他操作符。</li><li> 在确实需要使用通配符时，除非绝对有必要，否则不要把它们用 在搜索模式的开始处。把通配符置于搜索模式的开始处，搜索起来是最慢的。</li><li>仔细注意通配符的位置。如果放错地方，可能不会返回想要的数据。</li></ol><h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p>select  prod_name  from products where prod_name regexp ‘1000’ order by prod_name</p><p>除关键字LIKE被REGEXP替代外，这条语句看上去非常像使用 LIKE的语句.它告诉MySQL：REGEXP后所跟的东西作 为正则表达式（与文字正文1000匹配的一个正则表达式）处理</p><h2 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h2><p>eg:</p><p>1.如果想在一个字段中既显示公司名，又显示公司的地址，但这两 个信息一般包含在不同的表列中。</p><p>2.城市、州和邮政编码存储在不同的列中（应该这样），但邮件标签 打印程序却需要把它们作为一个恰当格式的字段检索出来。</p><p>客户机与服务器的格式 可在SQL语句内完成的许多转换 和格式化工作都可以直接在客户机应用程序内完成。但一 般来说，在数据库服务器上完成这些操作比在客户机中完 成要快得多，因为DBMS是设计来快速有效地完成这种处 理的</p><h3 id="拼接字段"><a href="#拼接字段" class="headerlink" title="拼接字段"></a>拼接字段</h3><h4 id="拼接（concatenate）-将值联结到一起构成单个值。"><a href="#拼接（concatenate）-将值联结到一起构成单个值。" class="headerlink" title="拼接（concatenate） 将值联结到一起构成单个值。"></a>拼接（concatenate） 将值联结到一起构成单个值。</h4><p>为了说明如何使用计算字段，举一个创建由两列组成的标题的简单 </p><p>例子:</p><p>vendors表包含供应商名和位置信息。假如要生成一个供应商报表， 需要在供应商的名字中按照name(location)这样的格式列出供应商的位置。</p><p>此报表需要单个值，而表中数据存储在两个列vend_name和vend_  country中。此外，需要用括号将vend_country括起来，这些东西都没有明确存储在数据库表中。</p><p>解决办法是把两个列拼接起来。在MySQL的SELECT语句中，可使用 Concat()函数来拼接两个列。</p><p>select  Concat(vend_name,’ (‘,vend_country,’)’ ) </p><p>from vendors </p><p>order by vend_name;</p><p>Concat()拼接串，即把多个串连接起来形成一个较长的串。 Concat()需要一个或多个指定的串，各个串之间用逗号分隔。 上面的SELECT语句连接以下4个元素:</p><p>1.存储在vend_name列中的名字；</p><p>2.包含一个空格和一个左圆括号的串；</p><p>3.存储在vend_country列中的国家；</p><p>4.包含一个右圆括号的串。</p><p>Trim函数 MySQL除了支持RTrim()（它去掉 串右边的空格），还支持LTrim()（去掉串左边的空格）以及 Trim()（去掉串左右两边的空格)</p><p>eg:</p><p>select  Concat(RTrim(vend_name),’ (‘,vend_country,’)’ ) </p><p>from vendors </p><p>order by vend_name;</p><p>RTrim(字段)：去掉字段右边的空格</p><h4 id="别名（alias）as"><a href="#别名（alias）as" class="headerlink" title="别名（alias）as"></a>别名（alias）as</h4><p>select  Concat(RTrim(vend_name),’ (‘,vend_country,’)’ )  as vend_title</p><p>from vendors </p><p>order by vend_name;</p><p>SELECT语句本身与以前使用的相同，只不过这里的语句中计算 字段之后跟了文本AS vend_title。它指示SQL创建一个包含 指定计算的名为vend_title的计算字段。从输出中可以看到，结果与以 前的相同，但现在列名为vend_title，任何客户机应用都可以按名引用 这个列，就像它是一个实际的表列一样。</p><p>别名的其他用途 :别名还有其他用途。常见的用途包括在实际 的表列名包含不符合规定的字符（如空格）时重新命名它，在 原来的名字含混或容易误解时扩充它，等等。</p><p>导出列 别名有时也称为导出列（derived column）;</p><h3 id="执行算术计算"><a href="#执行算术计算" class="headerlink" title="执行算术计算"></a>执行算术计算</h3><p>计算字段的另一常见用途是对检索出的数据进行算术计算。</p><ul><li><p>‘+’ 加</p></li><li><p>‘—’减</p></li><li><p>‘*’ 乘</p></li><li><p>‘/‘除</p></li></ul><p>直接字段 加减乘除 就可以了</p><p>如何测试计算 SELECT提供了测试和试验函数与计算的一个 很好的办法。虽然SELECT通常用来从表中检索数据，但可以 省略FROM子句以便简单地访问和处理表达式。例如，SELECT  3*2;将返回6，SELECT Trim(‘abc’);将返回abc，而SELECT  Now()利用Now()函数返回当前日期和时间。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数没有SQL的可移植性强 能运行在多个系统上的代码称 为可移植的（portable）。相对来说，多数SQL语句是可移植的， 在SQL实现之间有差异时，这些差异通常不那么难处理。而函 数的可移植性却不强。几乎每种主要的DBMS的实现都支持其 他实现不支持的函数，而且有时差异还很大。  为了代码的可移植，许多SQL程序员不赞成使用特殊实现的功 能。虽然这样做很有好处，但不总是利于应用程序的性能。如 果不使用这些函数，编写某些应用程序代码会很艰难。必须利 用其他方法来实现DBMS非常有效地完成的工作。  如果你决定使用函数，应该保证做好代码注释，以便以后你（或 其他人）能确切地知道所编写SQL代码的含义。</p><h3 id="文本处理函数"><a href="#文本处理函数" class="headerlink" title="文本处理函数"></a>文本处理函数</h3><p>Trim()去除空格</p><p>LTrim() 去掉串左边的空格</p><p>RTrim() 去掉串右边的空格</p><p>Upper()将文本转换为大写</p><p>Left() 返回串左边的字符</p><p>Right() 返回串右边的字符</p><p>Length() 返回串的长度</p><p>Locate() 找出串的一个子串</p><p>Lower() 将串转换为小写</p><p>Soundex() 返回串的SOUNDEX值</p><p>SubString() 返回子串的字符</p><p>SOUNDEX是一个将任何文 本串转换为描述其语音表示的字母数字模式的算法。SOUNDEX考虑了类似 的发音字符和音节，使得能对串进行发音比较而不是字母比较。虽然 SOUNDEX不是SQL概念，但MySQL（就像多数DBMS一样）都提供对 SOUNDEX的支持</p><h3 id="日期和时间处理函数"><a href="#日期和时间处理函数" class="headerlink" title="日期和时间处理函数"></a>日期和时间处理函数</h3><p>AddDate() 增加一个日期（天、周等）</p><p> AddTime() 增加一个时间（时、分等）</p><p> CurDate() 返回当前日期</p><p> CurTime() 返回当前时间 </p><p>Date() 返回日期时间的日期部分</p><p> DateDiff() 计算两个日期之差</p><p> Date_Add() 高度灵活的日期运算函数</p><p> Date_Format() 返回一个格式化的日期或时间串</p><p> Day() 返回一个日期的天数部分</p><p> DayOfWeek() 对于一个日期，返回对应的星期几</p><p> Hour() 返回一个时间的小时部分</p><p> Minute() 返回一个时间的分钟部分 </p><p>Month() 返回一个日期的月份部分</p><p> Now() 返回当前日期和时间 </p><p>Second() 返回一个时间的秒部分</p><p> Time() 返回一个日期时间的时间部分</p><p> Year() 返回一个日期的年份部分</p><h3 id="数值处理函数"><a href="#数值处理函数" class="headerlink" title="数值处理函数"></a>数值处理函数</h3><p>Abs() 返回一个数的绝对值</p><p> Cos() 返回一个角度的余弦 </p><p>Exp() 返回一个数的指数值 </p><p>Mod() 返回除操作的余数 </p><p>Pi() 返回圆周率 </p><p>Rand() 返回一个随机数</p><p>Sin() 返回一个角度的正弦</p><p> Sqrt() 返回一个数的平方根 </p><p>Tan() 返回一个角度的正切</p><h2 id="汇总数据"><a href="#汇总数据" class="headerlink" title="汇总数据"></a>汇总数据</h2><h3 id="聚集函数"><a href="#聚集函数" class="headerlink" title="聚集函数"></a>聚集函数</h3><p>聚集函数（aggregate function） 运行在行组上，计算和返回单 个值的函数。</p><p>AVG() 返回某列的平均值</p><p> COUNT() 返回某列的行数 </p><p>MAX() 返回某列的最大值 </p><p>MIN() 返回某列的最小值 </p><p>SUM() 返回某列值之和</p><h4 id="聚集不同值：聚集函数的-DISTINCT的使用"><a href="#聚集不同值：聚集函数的-DISTINCT的使用" class="headerlink" title="聚集不同值：聚集函数的 DISTINCT的使用"></a>聚集不同值：聚集函数的 DISTINCT的使用</h4><p>ALL参数不需要指定，因为它是默认行为。如果 不指定DISTINCT，则假定为ALL</p><p>select AVG(distinct prod_price) as avg_price</p><p>如果指定列名，则DISTINCT只能用于COUNT()。DISTINCT 不能用于COUNT(*)，因此不允许使用COUNT（DISTINCT）， 否则会产生错误。类似地，DISTINCT必须使用列名，不能用 于计算或表达式。</p><h2 id="分组数据"><a href="#分组数据" class="headerlink" title="分组数据"></a>分组数据</h2><h3 id="创建分组"><a href="#创建分组" class="headerlink" title="创建分组"></a>创建分组</h3><p>分组是在SELECT语句的GROUP BY子句中建立的</p><p>在具体使用GROUP BY子句前，需要知道一些重要的规定。</p><p>1.GROUP BY子句可以包含任意数目的列。这使得能对分组进行嵌套， 为数据分组提供更细致的控制。</p><p>2.如果在GROUP BY子句中嵌套了分组，数据将在最后规定的分组上 进行汇总。换句话说，在建立分组时，指定的所有列都一起计算 （所以不能从个别的列取回数据）</p><p>3.GROUP BY子句中列出的每个列都必须是检索列或有效的表达式 （但不能是聚集函数）。如果在SELECT中使用表达式，则必须在 GROUP BY子句中指定相同的表达式。不能使用别名。</p><p>4.除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子 句中给出。</p><p>5.如果分组列中具有NULL值，则NULL将作为一个分组返回。如果列 中有多行NULL值，它们将分为一组。</p><ol start="6"><li>GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。</li><li>使用ROLLUP 使用WITH ROLLUP关键字，可以得到每个分组以 及每个分组汇总级别（针对每个分组）的值。</li></ol><p>Having:<br><strong>where 过滤行，having过滤分组</strong>；</p><p><strong>HAVING和WHERE的差别 这里有另一种理解方法，WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。这是一个重要的区别</strong>，<strong>WHERE排除的行不包括在分组中。这可能会改变计 算值，从而影响HAVING子句中基于这些值过滤掉的分组</strong>。</p><p>ORDER BY ：排序产生的输出；任意列都可以使用（甚至 非选择的列也可以使用）</p><p>GROUP BY：分组行。但输出可能不是分组的顺序；只可能使用选择列或表达式列，而且必须使用每个选择 列表达式；如果与聚集函数一起使用列（或表达式），则必须使用；</p><p>不要忘记ORDER BY 一般在使用GROUP BY子句时，应该也给 出ORDER BY子句。这是保证数据正确排序的唯一方法。千万 不要仅依赖GROUP BY排序数据。</p><h3 id="SELECT子句顺序"><a href="#SELECT子句顺序" class="headerlink" title="SELECT子句顺序"></a>SELECT子句顺序</h3><p><img src="https://gitee.com/wei-nian/project-drawing-bed/raw/master/20210604210838.png"></p><p><img src="C:\Users\86152\AppData\Roaming\Typora\typora-user-images\image-20210604211028067.png" alt="image-20210604211028067"></p><h2 id="使用子查询"><a href="#使用子查询" class="headerlink" title="使用子查询"></a>使用子查询</h2><p>select语句是SQL的查询，</p><p>在SELECT语句中，子查询总是从内向外处理。</p><p>格式化SQL 包含子查询的SELECT语句难以阅读和调试，特 别是它们较为复杂时更是如此。如上所示把子查询分解为多行 并且适当地进行缩进，能极大地简化子查询的使用。</p><p>列必须匹配 在WHERE子句中使用子查询，应 该保证SELECT语句具有与WHERE子句中相同数目的列。通常， 子查询将返回单个列并且与单个列匹配，但如果需要也可以 使用多个列。</p><p>eg:</p><p>假如需要显示customers 表中每个客户的订单总数。订单与相应的客户ID存储在orders表中</p><p><strong>select</strong></p><p> <strong>cust_name ,</strong></p><p> <strong>cust_state,</strong></p><p><strong>(select COUNT(*)</strong> </p><p><strong>from orders</strong> </p><p><strong>where orders.cust_id =customers_cust_id) as orders</strong></p><p><strong>from customers</strong></p><p><strong>order by cust_name;</strong></p><p>相关子查询（correlated subquery） 涉及外部查询的子查询。 这种类型的子查询称为相关子查询。任何时候只要列名可能有多义 性，就必须使用这种语法（表名和列名由一个句点分隔）</p><p>逐渐增加子查询来建立查询 用子查询测试和调试查询很有 技巧性，特别是在这些语句的复杂性不断增加的情况下更是如 此。用子查询建立（和测试）查询的最可靠的方法是逐渐进行， 这与MySQL处理它们的方法非常相同。首先，建立和测试最 内层的查询。然后，用硬编码数据建立和测试外层查询，并且仅在确认它正常后才嵌入子查询。这时，再次测试它。对于要 增加的每个查询，重复这些步骤。这样做仅给构造查询增加了 一点点时间，但节省了以后（找出查询为什么不正常）的大量 时间，并且极大地提高了查询一开始就正常工作的可能性。</p><h2 id="联结表"><a href="#联结表" class="headerlink" title="联结表"></a>联结表</h2><p>假如有一个包含产品目录的数据库表，其中每种类别的物品占一行。 对于每种物品要存储的信息包括产品描述和价格，以及生产该产品的供 应商信息。假如有由同一供应商生产的多种物品，那么在何处存储供应 商信息（如，供应商名、地址、联系方法等）呢？</p><p>1.因为同一供应商生产的每个产品的供应商信息都是相同的，对每 个产品重复此信息既浪费时间又浪费存储空间。</p><p>2.如果供应商信息改变（例如，供应商搬家或电话号码变动），只需 改动一次即可。</p><p>3.如果有重复数据（即每种产品都存储供应商信息），很难保证每次 输入该数据的方式都相同。不一致的数据在报表中很难利用。</p><p>外键（foreign key） 外键为某个表中的一列，它包含另一个表 的主键值，定义了两个表之间的关系</p><p>关系数据可以有效地存储和方便地处理。因此，关系数据库 的可伸缩性远比非关系数据库要好。</p><p>联结不是物理实体。换句 话说，它在实际的数据库表中不存在。联结由MySQL根据需 要建立，它存在于查询的执行当中。</p><p>select vend_name,prod_name,prod_price</p><p>from vendors,products</p><p>where vendors.vend_id=product.vend_id</p><p>order by vend_name,prod_name;</p><p>完全限定列名 在引用的列可能出现二义性时，必须使用完 全限定列名（用一个点分隔的表名和列名）。如果引用一个 没有用表名限制的具有二义性的列名，MySQL将返回错误</p><p><strong>笛卡儿积（cartesian product） 由没有联结条件的表关系返回 的结果为笛卡儿积。检索出的行的数目将是第一个表中的行数乘 以第二个表中的行数</strong>。</p><p>不要忘了WHERE子句 应该保证所有联结都有WHERE子句，否 则MySQL将返回比想要的数据多得多的数据。同理，应该保 证WHERE子句的正确性。不正确的过滤条件将导致MySQL返回 不正确的数据</p><p>叉联结 有时我们会听到返回称为叉联结（cross join）的笛卡 儿积的联结类型。</p><h3 id="内部联结"><a href="#内部联结" class="headerlink" title="内部联结"></a>内部联结</h3><p>它基于两个表之间的 相等测试。这种联结也称为内部联结。其实，对于这种联结可以使用稍 微不同的语法来明确指定联结的类型。</p><p>eg:</p><p>select vend_name,prod_name,prod_price</p><p>from vendors inner join products</p><p>on vendors.vend_id =products.vend_id</p><p>性能考虑 MySQL在运行时关联指定的每个表以处理联结。 这种处理可能是非常耗费资源的，因此应该仔细，不要联结 不必要的表。联结的表越多，性能下降越厉害.</p><p>用自联结而不用子查询 自联结通常作为外部语句用来替代 从相同表中检索数据时使用的子查询语句。虽然最终的结果是 相同的，但有时候处理联结远比处理子查询快得多</p><p>没有*=操作符 MySQL不支持简化字符的使用，</p><p>也没有=*</p><p>外部联结的类型 存在两种基本的外部联结形式：左外部联结 和右外部联结。它们之间的唯一差别是所关联的表的顺序不 同。换句话说，左外部联结可通过颠倒FROM或WHERE子句中表的顺序转换为右外部联结。因此，两种类型的外部联结可互 换使用</p><ul><li><p>左外连接查询 ( left join) 查询的结果为两个表匹配到的数据和右表特有的数据，对于左表中不存在的数据使用null填充</p></li><li><p>右外连接查询 ( right join）查询的结果为两个表匹配到的数据和左表特有的数据，对于右表中不存在的数据使用填充</p></li></ul><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>多数SQL查询都只包含从一个或多个表中返回数据的单条SELECT语 句。MySQL也允许执行多个查询（多条SELECT语句），并将结果作为单个 查询结果集返回。这些组合查询通常称为并（union）或复合查询；</p><p>使用组合查询的基本情况：</p><p>1.在单个查询中从不同的表返回类似结构的数据；</p><p>2.对单个表执行多个查询，按单个查询返回数据。</p><p>组合查询和多个WHERE条件 多数情况下，组合相同表的两个 查询完成的工作与具有多个WHERE子句条件的单条查询完成的 工作相同。换句话说，任何具有多个WHERE子句的SELECT语句 都可以作为一个组合查询给出，在以下段落中可以看到这一点。 这两种技术在不同的查询中性能也不同。因此，应该试一下这 两种技术，以确定对特定的查询哪一种性能更好。</p><h3 id="创建组合查询"><a href="#创建组合查询" class="headerlink" title="创建组合查询"></a>创建组合查询</h3><p>可用UNION操作符来组合数条SQL查询。利用UNION，可给出多条SELECT语句，将它们的结果组合成单个结果集。</p><p>假如需要价格小于等于5的所有物品的一个列表，而且 还想包括供应商1001和1002生产的所有物品（不考虑价格）。</p><p>(UNION)版</p><p>select vend_id,prod_id,prod_price</p><p>from products</p><p>where prod_price &lt;=5</p><p>union</p><p>select vend_id,prod_id,prod_price</p><p>from products</p><p>where vend_id in (1001,1002)</p><p>多条where</p><p>select vend_id,prod_id,prod_price</p><p>from products</p><p>where prod_price&lt;=5</p><p>or vend_id in(1001,1002);</p><h3 id="UNION规则"><a href="#UNION规则" class="headerlink" title="UNION规则"></a>UNION规则</h3><p><strong>1.UNION必须由两条或两条以上的SELECT语句组成，语句之间用关键字UNION分隔（因此，如果组合4条SELECT语句，将要使用3个 UNION关键字）。</strong></p><p><strong>2.UNION中的每个查询必须包含相同的列、表达式或聚集函数（不过各个列不需要以相同的次序列出）。</strong></p><p><strong>3.列数据类型必须兼容：类型不必完全相同，但必须是DBMS可以 隐含地转换的类型（例如，不同的数值类型或不同的日期类型。</strong></p><h3 id="包含或取消重复的行"><a href="#包含或取消重复的行" class="headerlink" title="包含或取消重复的行"></a>包含或取消重复的行</h3><p>UNION从查询结果集中自动去除了重复的行（换句话说，它的行为与 单条SELECT语句中使用多个WHERE子句条件一样）。因为供应商1002生产 的一种物品的价格也低于5，所以两条SELECT语句都返回该行。在使用 UNION时，重复的行被自动取消。</p><p>这是UNION的默认行为，但是如果需要，可以改变它。事实上，如果 想返回所有匹配行，可使用UNION ALL而不是UNION。</p><h3 id="对组合查询结果排序"><a href="#对组合查询结果排序" class="headerlink" title="对组合查询结果排序"></a>对组合查询结果排序</h3><p>SELECT语句的输出用ORDER BY子句排序。在用UNION组合查询时，只 能使用一条ORDER BY子句，它必须出现在最后一条SELECT语句之后。对 于结果集，不存在用一种方式排序一部分，而又用另一种方式排序另一 部分的情况，因此不允许使用多条ORDER BY子句。</p><p>eg:</p><p>select vend_id,prod_id,prod_price</p><p>from products</p><p>where prod_price&lt;=5</p><p>union</p><p>select vned_id,prod_id,prod_price</p><p>from products</p><p>where vend_id in(1001,1002)</p><p>order by vned_id,prod_price;</p><h2 id="全文本搜索"><a href="#全文本搜索" class="headerlink" title="全文本搜索"></a>全文本搜索</h2><p>MyISAM支持全文本搜索，InnoDB不支持全文本搜索；</p><p>搜索机制限制：</p><p>性能——通配符和正则表达式匹配通常要求MySQL尝试匹配表中所有行（而且这些搜索极少使用表索引）。因此，由于被搜索行数不断增加，这些搜索可能非常耗时。</p><p>明确控制——使用通配符和正则表达式匹配，很难（而且并不总是能）明确地控制匹配什么和不匹配什么。例如，指定一个词必 须匹配，一个词必须不匹配，而一个词仅在第一个词确实匹配的 情况下才可以匹配或者才可以不匹配。</p><p>智能化的结果——虽然基于通配符和正则表达式的搜索提供了非常灵活的搜索，但它们都不能提供一种智能化的选择结果的方法。 例如，一个特殊词的搜索将会返回包含该词的所有行，而不区分 包含单个匹配的行和包含多个匹配的行（按照可能是更好的匹配 来排列它们）。类似，一个特殊词的搜索将不会找出不包含该词但 包含其他相关词的行。</p><h3 id="使用全文本搜索"><a href="#使用全文本搜索" class="headerlink" title="使用全文本搜索"></a>使用全文本搜索</h3><p>一般在创建表时启用全文本搜索。CREATE TABLE语句接受FULLTEXT子句，它给出被索引列的一个逗号分隔的列表。</p><p>create table productnotes</p><p>(</p><p>note_id          int             not null    auto_increment,</p><p>prod_id        char(10)    not null,</p><p>note_date    datetime    not null,</p><p>note_text    text                null,</p><p>primary key(note_id),</p><p>FULLTEXT(note_text),</p><p>)ENGINE=MyISAM;</p><p>CREATE TABLE语句。现在，只需知道这条 CREATE TABLE语句定义表productnotes并列出它所包含的列 即可。这些列中有一个名为note_text的列，为了进行全文本搜索， MySQL根据子句FULLTEXT(note_text)的指示对它进行索引。这里的 FULLTEXT索引单个列，如果需要也可以指定多个列。</p><p>MySQL自动维护该索引。在增加、更新或删除行时， 索引随之自动更新。</p><p>不要在导入数据时使用FULLTEXT 更新索引要花时间，虽然 不是很多，但毕竟要花时间。如果正在导入数据到一个新表， 此时不应该启用FULLTEXT索引。应该首先导入所有数据，然 后再修改表，定义FULLTEXT。这样有助于更快地导入数据（而 且使索引数据的总时间小于在导入每行时分别进行索引所需 的总时间）。</p><h3 id="进行全文本搜索"><a href="#进行全文本搜索" class="headerlink" title="进行全文本搜索"></a>进行全文本搜索</h3><p>在索引之后，使用两个函数Match()和Against()执行全文本搜索， 其中Match()指定被搜索的列，Against()指定要使用的搜索表达式。</p><p>select note_text</p><p>from productnotes</p><p>where Match(note_text) Against(‘rabbit’)</p><p>使用完整的 Match() 说 明 传递给 Match() 的值必须与 FULLTEXT()定义中的相同。如果指定多个列，则必须列出它 们（而且次序正确）。</p><p>搜索不区分大小写 除非使用BINARY方式（本章中没有介绍）， 否则全文本搜索不区分大小写。</p><p>排序多个搜索项 如果指定多个搜索项，则包含多数匹配词的 那些行将具有比包含较少词（或仅有一个匹配）的那些行高的 等级值</p><p>全文本搜索提供了简单LIKE搜索不能提供的功能。而且， 由于数据是索引的，全文本搜索还相当快。</p><h3 id="布尔文本搜索"><a href="#布尔文本搜索" class="headerlink" title="布尔文本搜索"></a>布尔文本搜索</h3><p>MySQL支持全文本搜索的另外一种形式，称为布尔方式</p><h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><p>1.插入完整的行；</p><p>2.插入行的一部分；</p><p>3.插入多行；</p><p>4.插入某些查询的结果。</p><p><strong>MySQL用单条INSERT语句处理多个插入比使用多条INSERT 语句快。</strong></p><p><strong>INSERT SELECT中的列名 但是，不一定要求列名匹配。 事实上，MySQL甚至不关心SELECT返回的列名。它使用的是 列的位置，因此SELECT中的第一列（不管其列名）将用来填充 表列中指定的第一个列，第二列将用来填充表列中指定的第二 个列，如此等等。这对于从使用不同列名的表中导入数据是非 常有用的。</strong></p><p>在UPDATE语句中使用子查询 UPDATE语句中可以使用子查 询，使得能用SELECT语句检索出的数据更新列数据。</p><p>IGNORE关键字 如果用UPDATE语句更新多行，并且在更新这些 行中的一行或多行时出一个现错误，则整个UPDATE操作被取消 （错误发生前更新的所有行被恢复到它们原来的值）。为即使是发 生错误，也继续进行更新，可使用IGNORE关键字，</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>悲观锁与乐观锁</title>
      <link href="/yunpumian/2021/06/03/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81/"/>
      <url>/yunpumian/2021/06/03/%E6%82%B2%E8%A7%82%E9%94%81%E4%B8%8E%E4%B9%90%E8%A7%82%E9%94%81/</url>
      
        <content type="html"><![CDATA[<h1 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h1><p>悲观锁是在操作数据时，认为此操作会出现数据冲突，所以在进行每次操作时都要通过获取锁才能进行 对相同数据的操作，所以悲观锁需要耗费较多的时间。另悲观锁是由数据库自己实现了的，使用的时候，直接调用数据库的相关语句即可。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getRedPacket&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;com.pojo.RedPacket&quot;</span>&gt;</span></span><br><span class="line">select id, user_id as userId, amount, send_date as</span><br><span class="line">sendDate, total,stock, version, remaining_amount as remainingAmount from</span><br><span class="line">red_packet</span><br><span class="line">where id = #&#123;id&#125; for update</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>悲观锁是一种利用数据库内部机制提供的锁的方法，也就是对更新的数据加锁，这样在并发期间一旦有 一个事务持有了数据库记录的锁，其他的线程将不能再对数据进行更新. 在 SQL 中加入的 for update 语句，意味着将持有对数据库记录的行更新锁（因为这里使用主键查询， 所以只会对行加锁。如果使用的是非主键查询，要考虑是否对全表加锁的问题，加锁后可能引发其他查询的阻塞〉，那就意味着在高并发的场景下 ， 当一条事务持有了这个更新锁才能往下操作，其他的线程 如果要更新这条记录，都需要等待，这样就不会出现超发现象引发的数据一致性问题了。</p><p>对于悲观锁来说，当一条线程抢占了资源后，其他的线程将得不到资源，那么这个时， CPU 就会将这些 得不到资源的线程挂起，挂起的线程也会消耗 CPU 的资源尤其是在高并发的请求中。只能有一个事务占据资源，其他事务被挂起等待持有资源的事务提交并释放资源。当此时就进入了线程 2 ， 线程 3……线程n，开始抢夺资源的步骤了，这里假设线程 3 抢到资源。一旦线程1 提交了事务，那么锁就会被释放，这个时候被挂起的线程就会开始竞争红包资源，那么竞争 到的线程就会被 CPU 恢复到运行状态，继续运行。 于是频繁挂起，等待持有锁线程释放资源， 一旦释放资源后，就开始抢夺，恢复线程，直至所有红包资 源抢完。 在高并发的过程中，使用悲观锁就会造成大量的线程被挂起和恢复，这将十分消耗资源，这就是为什么 使用悲观锁性能不佳的原因。 有些时候，我们也会把悲观锁称为独占锁，毕竟只有一个线程可以独占这个资源，或者称为阻塞锁，因 为它会造成其他线程的阻塞。无论如何它都会造成并发能力的下降，从而导致 CPU频繁切换线程上下 文，造成性能低下。 为了克服这个问题，提高并发的能力，避免大量线程因为阻塞导致 CPU 进行大量的上下文切换，目前比 较普遍的是乐观锁机制。</p><p>要使用悲观锁，必须关闭 <a href="https://www.jianshu.com/p/359c3fe50c7f">MySQL</a> 数据库的自动提交属性<code>set autocommit=0</code>。因为 MySQL 默认使用 autocommit 模式，也就是说，当执行一个更新操作后，MySQL 会立刻将结果进行提交。</p><h1 id="乐观锁："><a href="#乐观锁：" class="headerlink" title="乐观锁："></a>乐观锁：</h1><p>乐观锁是相对悲观锁而言的，乐观锁假设数据一般情况不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果冲突，则返回给用户异常信息，让用户决定如何去做。乐观锁适用于读多写少的场景，这样可以提高程序的吞吐量。</p><p>乐观锁采取了更加宽松的加锁机制。也是为了避免数据库幻读、业务处理时间过长等原因引起数据处理错误的一种机制，但乐观锁不会刻意使用数据库本身的锁机制，而是依据数据本身来保证数据的正确性。乐观锁的实现：</p><h2 id="版本号控制"><a href="#版本号控制" class="headerlink" title="版本号控制"></a>版本号控制</h2><p>一般是在数据表中加上一个数据版本号 version 字段，表示数据被修改的次数。当数据被修改时，version 值会 +1。当线程 A 要更新数据时，在读取数据的同时也会读取 version 值，在提交更新时，若刚才读取到的 version 值与当前数据库中的 version 值相等时才更新，否则重试更新操作，直到更新成功。</p><p>乐观锁每次在执行数据修改操作时，都会带上一个版本号，一旦版本号和数据的版本号一致就可以执行修改操作并对版本号执行 +1 操作，否则就执行失败。因为每次操作的版本号都会随之增加。除了 version 以外，还可以使用时间戳，因为时间戳天然具有顺序递增性。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JMeter压力测试</title>
      <link href="/yunpumian/2021/06/03/JMeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%EF%BC%9A/"/>
      <url>/yunpumian/2021/06/03/JMeter%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95%EF%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="JMeter压力测试："><a href="#JMeter压力测试：" class="headerlink" title="JMeter压力测试："></a>JMeter压力测试：</h1><h2 id="1-1-配置线程组："><a href="#1-1-配置线程组：" class="headerlink" title="1.1.配置线程组："></a>1.1.配置线程组：</h2><p>可以配置线程组名称，线程数，准备时长（Ramp-Up Period(in seconds)）循环次数，调度器等参</p><h2 id="1-2-添加HTTP请求"><a href="#1-2-添加HTTP请求" class="headerlink" title="1.2. 添加HTTP请求"></a>1.2. 添加HTTP请求</h2><p>添加Sampler采样器</p><h2 id="1-3-添加查看监听"><a href="#1-3-添加查看监听" class="headerlink" title="1.3. 添加查看监听"></a>1.3. 添加查看监听</h2><p>聚合报告、图形结果、用表格查看结果，区别在于结果展现形式不同。<img src="https://gitee.com/wei-nian/project-drawing-bed/raw/master/20210603215245.png" alt="汇总图"></p><p><img src="https://gitee.com/wei-nian/project-drawing-bed/raw/master/20210603215257.png" alt="响应时间图"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>动态查询SQL</title>
      <link href="/yunpumian/2021/06/03/%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2Mysql/"/>
      <url>/yunpumian/2021/06/03/%E5%8A%A8%E6%80%81%E6%9F%A5%E8%AF%A2Mysql/</url>
      
        <content type="html"><![CDATA[<h2 id="1-和-的区别"><a href="#1-和-的区别" class="headerlink" title="1.#和$的区别"></a>1.#和$的区别</h2><p>有order by 中的传值引起的问题：order by 后面不能用# 只能用$ 进行传值。</p><p>使用 # 能够防止sql注入，$不能避免注入攻击。</p><p>使用#parameterName方式引用参数的时候，Mybatis会把传入的参数当成是一个字符串，自动添加双引号。$parameterName引用参数时，不做任何处理，直接将值拼接在sql语句中。</p><p> #{}是预编译处理，$ {}是字符串替换。<br>      mybatis在处理#{}时，会将sql中的#{}替换为?号，调用PreparedStatement的set方法来赋值；mybatis在处理 $ { } 时，就是把 ${ } 替换成变量的值。使用 #{} 可以有效的防止SQL注入，提高系统安全性。</p><p>对于这个题目我感觉要抓住两点：<br>（1）$ 符号一般用来当作占位符，常使用Linux脚本的人应该对此有更深的体会吧。既然是占位符，当然就是被用来替换的。知道了这点就能很容易区分$和#，从而不容易记错了。<br>（2）预编译的机制。预编译是提前对SQL语句进行预编译，而其后注入的参数将不会再进行SQL编译。我们知道，SQL注入是发生在编译的过程中，因为恶意注入了某些特殊字符，最后被编译成了恶意的执行操作。而预编译机制则可以很好的防止SQL注入。</p><h2 id="2-动态查询"><a href="#2-动态查询" class="headerlink" title="2.动态查询"></a>2.动态查询</h2><h3 id="if："><a href="#if：" class="headerlink" title="if："></a>if：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;findActiveBlogWithTitleLike&quot;</span><br><span class="line">     resultType<span class="operator">=</span>&quot;Blog&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOG</span><br><span class="line">  <span class="keyword">WHERE</span> state <span class="operator">=</span> ‘ACTIVE’</span><br><span class="line">  <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">AND</span> title <span class="keyword">like</span> #&#123;title&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType<span class="operator">=</span>&quot;Blog&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOG <span class="keyword">WHERE</span> state <span class="operator">=</span> ‘ACTIVE’</span><br><span class="line">  <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">AND</span> title <span class="keyword">like</span> #&#123;title&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span>if test<span class="operator">=</span>&quot;author != null and author.name != null&quot;<span class="operator">&gt;</span></span><br><span class="line">    <span class="keyword">AND</span> author_name <span class="keyword">like</span> #&#123;author.name&#125;</span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>if<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h3 id="choose、when、otherwise："><a href="#choose、when、otherwise：" class="headerlink" title="choose、when、otherwise："></a>choose、when、otherwise：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&lt;</span><span class="keyword">select</span> id<span class="operator">=</span>&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType<span class="operator">=</span>&quot;Blog&quot;<span class="operator">&gt;</span></span><br><span class="line">  <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> BLOG <span class="keyword">WHERE</span> state <span class="operator">=</span> ‘ACTIVE’</span><br><span class="line">  <span class="operator">&lt;</span>choose<span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;title != null&quot;<span class="operator">&gt;</span></span><br><span class="line">      <span class="keyword">AND</span> title <span class="keyword">like</span> #&#123;title&#125;</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="keyword">when</span> test<span class="operator">=</span>&quot;author != null and author.name != null&quot;<span class="operator">&gt;</span></span><br><span class="line">      <span class="keyword">AND</span> author_name <span class="keyword">like</span> #&#123;author.name&#125;</span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">when</span><span class="operator">&gt;</span></span><br><span class="line">    <span class="operator">&lt;</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">      <span class="keyword">AND</span> featured <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">    <span class="operator">&lt;</span><span class="operator">/</span>otherwise<span class="operator">&gt;</span></span><br><span class="line">  <span class="operator">&lt;</span><span class="operator">/</span>choose<span class="operator">&gt;</span></span><br><span class="line"><span class="operator">&lt;</span><span class="operator">/</span><span class="keyword">select</span><span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;findActiveBlogLike&quot;</span><br><span class="line">     resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  &lt;where&gt;</span><br><span class="line">    &lt;if test=&quot;state != null&quot;&gt;</span><br><span class="line">         state = #&#123;state&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;title != null&quot;&gt;</span><br><span class="line">        AND title like #&#123;title&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">    &lt;if test=&quot;author != null and author.name != null&quot;&gt;</span><br><span class="line">        AND author_name like #&#123;author.name&#125;</span><br><span class="line">    &lt;/if&gt;</span><br><span class="line">  &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;WHERE&quot; prefixOverrides=&quot;AND |OR &quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;updateAuthorIfNecessary&quot;&gt;</span><br><span class="line">  update Author</span><br><span class="line">    &lt;set&gt;</span><br><span class="line">      &lt;if test=&quot;username != null&quot;&gt;username=#&#123;username&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;password != null&quot;&gt;password=#&#123;password&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;email != null&quot;&gt;email=#&#123;email&#125;,&lt;/if&gt;</span><br><span class="line">      &lt;if test=&quot;bio != null&quot;&gt;bio=#&#123;bio&#125;&lt;/if&gt;</span><br><span class="line">    &lt;/set&gt;</span><br><span class="line">  where id=#&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;trim prefix=&quot;SET&quot; suffixOverrides=&quot;,&quot;&gt;</span><br><span class="line">  ...</span><br><span class="line">&lt;/trim&gt;</span><br></pre></td></tr></table></figure><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach:"></a>foreach:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectPostIn&quot; resultType=&quot;domain.blog.Post&quot;&gt;</span><br><span class="line">  SELECT *</span><br><span class="line">  FROM POST P</span><br><span class="line">  WHERE ID in</span><br><span class="line">  &lt;foreach item=&quot;item&quot; index=&quot;index&quot; collection=&quot;list&quot;</span><br><span class="line">      open=&quot;(&quot; separator=&quot;,&quot; close=&quot;)&quot;&gt;</span><br><span class="line">        #&#123;item&#125;</span><br><span class="line">  &lt;/foreach&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p><em>foreach</em> 元素的功能非常强大，它允许你指定一个集合，声明可以在元素体内使用的集合项（item）和索引（index）变量。它也允许你指定开头与结尾的字符串以及集合项迭代之间的分隔符。</p><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>要在带注解的映射器接口类中使用动态 SQL，可以使用 <em>script</em> 元素.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@Update</span>(&#123;&quot;&lt;script&gt;&quot;,</span><br><span class="line">   &quot;update Author&quot;,</span><br><span class="line">   &quot;  &lt;set&gt;&quot;,</span><br><span class="line">   &quot;    &lt;if test=&#x27;username != null&#x27;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;,</span><br><span class="line">   &quot;    &lt;if test=&#x27;password != null&#x27;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;,</span><br><span class="line">   &quot;    &lt;if test=&#x27;email != null&#x27;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;,</span><br><span class="line">   &quot;    &lt;if test=&#x27;bio != null&#x27;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;,</span><br><span class="line">   &quot;  &lt;/set&gt;&quot;,</span><br><span class="line">   &quot;where id=#&#123;id&#125;&quot;,</span><br><span class="line">   &quot;&lt;/script&gt;&quot;&#125;)</span><br></pre></td></tr></table></figure><p>O3项目里面的update</p><h3 id="bind"><a href="#bind" class="headerlink" title="bind:"></a>bind:</h3><p> 元素允许你在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。应用模糊查询</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;selectBlogsLike&quot; resultType=&quot;Blog&quot;&gt;</span><br><span class="line">  &lt;bind name=&quot;pattern&quot; value=&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot; /&gt;</span><br><span class="line">  SELECT * FROM BLOG</span><br><span class="line">  WHERE title LIKE #&#123;pattern&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>name中含有”x”的记录，通常要传入接口的字符串就要为： “%x%”，然后传入mapper文件中的pattern的值就为 “%x%”，所以sql语句就变为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;select id=&quot;getPersons&quot; resultType=&quot;com.mybaits.pojo.Person&quot;&gt;</span><br><span class="line">        select * from PERSON</span><br><span class="line">        &lt;！--接口传入的值在pattern变量中，然后把传入的值拼接成&quot;&#x27;%&#x27;+pattern+&#x27;%&#x27;&quot;形式，放入namePattern参数中--&gt;</span><br><span class="line">        &lt;bind name=&quot;namePattern&quot; value=&quot;&#x27;%&#x27;+pattern+&#x27;%&#x27;&quot;/&gt;</span><br><span class="line">        &lt;if test=&quot;namePattern!= null&quot;&gt;</span><br><span class="line">            where name like #&#123;namePattern&#125;</span><br><span class="line">        &lt;/if</span><br><span class="line">    &lt;/select&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>matery基本配置</title>
      <link href="/yunpumian/2021/06/03/Matery%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
      <url>/yunpumian/2021/06/03/Matery%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>简单漂亮，文章内容美观易读</li><li><a href="https://material.io/">Material Design</a> 设计</li><li>响应式设计，博客在桌面端、平板、手机等设备上均能很好的展现</li><li>首页轮播文章及每天动态切换 <code>Banner</code> 图片</li><li>瀑布流式的博客文章列表（文章无特色图片时会有 <code>24</code> 张漂亮的图片代替）</li><li>时间轴式的归档页</li><li><strong>词云</strong>的标签页和<strong>雷达图</strong>的分类页</li><li>丰富的关于我页面（包括关于我、文章统计图、我的项目、我的技能、相册等）</li><li>可自定义的数据的友情链接页面</li><li>支持文章置顶和文章打赏</li><li>支持 <code>MathJax</code></li><li><code>TOC</code> 目录</li><li>可设置复制文章内容时追加版权信息</li><li>可设置阅读文章时做密码验证</li><li><a href="https://gitalk.github.io/">Gitalk</a>、<a href="https://imsun.github.io/gitment/">Gitment</a>、<a href="https://valine.js.org/">Valine</a> 和 <a href="https://disqus.com/">Disqus</a> 评论模块（推荐使用 <code>Gitalk</code>）</li><li>集成了<a href="http://busuanzi.ibruce.info/">不蒜子统计</a>、谷歌分析（<code>Google Analytics</code>）和文章字数统计等功能</li><li>支持在首页的音乐播放和视频播放功能</li><li>支持<code>emoji</code>表情，用<code>markdown emoji</code>语法书写直接生成对应的能<strong>跳跃</strong>的表情。</li><li>支持 <a href="http://www.daovoice.io/">DaoVoice</a>、<a href="https://www.tidio.com/">Tidio</a> 在线聊天功能。</li></ul><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>本主题<strong>推荐你使用 Hexo 5.0.0 及以上的版本</strong>。如果，你已经有一个自己的 <a href="https://hexo.io/zh-cn/">Hexo</a> 博客了，建议你将 Hexo 升级到最新稳定的版本。</p><p>点击 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master">这里</a> 下载 <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到你 Hexo 的 <code>themes</code> 文件夹中即可。</p><p>当然你也可以在你的 <code>themes</code> 文件夹下使用 <code>git clone</code> 命令来下载:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/blinkfox/hexo-theme-matery.git</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p>修改 Hexo 根目录下的 <code>_config.yml</code> 的  <code>theme</code> 的值：<code>theme: hexo-theme-matery</code></p><h4 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h4><ul><li>请修改 <code>_config.yml</code> 的 <code>url</code> 的值为你的网站主 <code>URL</code>（如：<code>http://xxx.github.io</code>）。</li><li>建议修改两个 <code>per_page</code> 的分页条数值为 <code>6</code> 的倍数，如：<code>12</code>、<code>18</code> 等，这样文章列表在各个屏幕下都能较好的显示。</li><li>如果你是中文用户，则建议修改 <code>language</code> 的值为 <code>zh-CN</code>。</li></ul><h3 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h3><p><code>categories</code> 页是用来展示所有分类的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>categories/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">categories</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h3><p><code>tags</code> 页是用来展示所有标签的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>tags/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 18:23:38</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h3><p><code>about</code> 页是用来展示<strong>关于我和我的博客</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>about/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/about/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">about</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="新建留言板-contact-页（可选的）"><a href="#新建留言板-contact-页（可选的）" class="headerlink" title="新建留言板 contact 页（可选的）"></a>新建留言板 contact 页（可选的）</h3><p><code>contact</code> 页是用来展示<strong>留言板</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>contact/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;contact&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/contact/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">contact</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;contact&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;contact&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：本留言板功能依赖于第三方评论系统，请<strong>激活</strong>你的评论系统才有效果。并且在主题的 <code>_config.yml</code> 文件中，第 <code>19</code> 至 <code>21</code> 行的“<strong>菜单</strong>”配置，取消关于留言板的注释即可。</p></blockquote><h3 id="新建友情链接-friends-页（可选的）"><a href="#新建友情链接-friends-页（可选的）" class="headerlink" title="新建友情链接 friends 页（可选的）"></a>新建友情链接 friends 页（可选的）</h3><p><code>friends</code> 页是用来展示<strong>友情链接</strong>信息的页面，如果在你的博客 <code>source</code> 目录下还没有 <code>friends/index.md</code> 文件，那么你就需要新建一个，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;friends&quot;</span></span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/friends/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">friends</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-12-12 21:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;friends&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;friends&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>同时，在你的博客 <code>source</code> 目录下新建 <code>_data</code> 目录，在 <code>_data</code> 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[&#123;</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;http://image.luokangyuan.com/1_qq_27922023.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;码酱&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span>: <span class="string">&quot;我不是大佬，只是在追寻大佬的脚步&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;http://luokangyuan.com/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;前去学习&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;http://image.luokangyuan.com/4027734.jpeg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;闪烁之狐&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span>: <span class="string">&quot;编程界大佬，技术牛，人还特别好，不懂的都可以请教大佬&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://blinkfox.github.io/&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;前去学习&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">&quot;avatar&quot;</span>: <span class="string">&quot;http://image.luokangyuan.com/avatar.jpg&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;ja_rome&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;introduction&quot;</span>: <span class="string">&quot;平凡的脚步也可以走出伟大的行程&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;url&quot;</span>: <span class="string">&quot;https://me.csdn.net/jlh912008548&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;前去学习&quot;</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h3 id="新建-404-页"><a href="#新建-404-页" class="headerlink" title="新建 404 页"></a>新建 404 页</h3><p>如果在你的博客 <code>source</code> 目录下还没有 <code>404.md</code> 文件，那么你就需要新建一个</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page 404</span><br></pre></td></tr></table></figure><p>编辑你刚刚新建的页面文件 <code>/source/404/index.md</code>，至少需要以下内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-30 17:25:30</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;404&quot;</span></span><br><span class="line"><span class="attr">layout:</span> <span class="string">&quot;404&quot;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&quot;Oops～，我崩溃了！找不到你想要的页面 :(&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="菜单导航配置"><a href="#菜单导航配置" class="headerlink" title="菜单导航配置"></a>菜单导航配置</h3><h4 id="配置基本菜单导航的名称、路径url和图标icon"><a href="#配置基本菜单导航的名称、路径url和图标icon" class="headerlink" title="配置基本菜单导航的名称、路径url和图标icon."></a>配置基本菜单导航的名称、路径url和图标icon.</h4><p>1.菜单导航名称可以是中文也可以是英文(如：<code>Index</code>或<code>主页</code>)<br>2.图标icon 可以在<a href="https://fontawesome.com/icons">Font Awesome</a> 中查找   </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-book</span></span><br></pre></td></tr></table></figure><h4 id="二级菜单配置方法"><a href="#二级菜单配置方法" class="headerlink" title="二级菜单配置方法"></a>二级菜单配置方法</h4><p>如果你需要二级菜单则可以在原基本菜单导航的基础上如下操作</p><ol><li>在需要添加二级菜单的一级菜单下添加<code>children</code>关键字(如:<code>About</code>菜单下添加<code>children</code>)     </li><li>在<code>children</code>下创建二级菜单的 名称name,路径url和图标icon.      </li><li>注意每个二级菜单模块前要加 <code>-</code>.     </li><li>注意缩进格式  </li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="attr">Tags:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span></span><br><span class="line">  <span class="attr">Categories:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span></span><br><span class="line">  <span class="attr">Archives:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-user-circle-o</span></span><br><span class="line">  <span class="attr">Friends:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-book</span></span><br><span class="line">  <span class="attr">Medias:</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-list</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Music</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/music</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-music</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Movies</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/movies</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-film</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Books</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/books</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-book</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Galleries</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/galleries</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-image</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后就可以在文章中对应位置看到你用<code>emoji</code>语法写的表情了。</p><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>从 Hexo5.0 版本开始自带了 <code>prismjs</code> 代码语法高亮的支持，本主题对此进行了改造支持。</p><p>如果你的博客中曾经安装过 <code>hexo-prism-plugin</code> 的插件，那么你须要执行 <code>npm uninstall hexo-prism-plugin</code> 来卸载掉它，否则生成的代码中会有 <code>&amp;#123;</code> 和 <code>&amp;#125;</code> 的转义字符。</p><p>然后，修改 Hexo 根目录下 <code>_config.yml</code> 文件中 <code>highlight.enable</code> 的值为 <code>false</code>，并将 <code>prismjs.enable</code> 的值设置为 <code>true</code>，主要配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>主题中默认的 <code>prismjs</code> 主题是 <code>Tomorrow Night</code>，如果你想定制自己的主题，可以前往 <a href="https://prismjs.com/download.html">prismjs 下载页面</a> 定制下载自己喜欢的主题 <code>css</code> 文件，然后将此 css 主题文件取名为 <code>prism.css</code>，替换掉 <code>hexo-theme-matery</code> 主题文件夹中的 <code>source/libs/prism/prism.css</code> 文件即可。</p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>本主题中还使用到了 <a href="https://github.com/wzpan/hexo-generator-search">hexo-generator-search</a> 的 Hexo 插件来做内容搜索，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></table></figure><h3 id="中文链接转拼音（建议安装）"><a href="#中文链接转拼音（建议安装）" class="headerlink" title="中文链接转拼音（建议安装）"></a>中文链接转拼音（建议安装）</h3><p>如果你的文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 <code>SEO</code>，且 <code>gitment</code> 评论对中文链接也不支持。我们可以用 <a href="https://github.com/viko16/hexo-permalink-pinyin">hexo-permalink-pinyin</a> Hexo 插件使在生成文章时生成中文拼音的永久链接。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-permalink-pinyin --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink_pinyin:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">separator:</span> <span class="string">&#x27;-&#x27;</span> <span class="comment"># default: &#x27;-&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>注</strong>：除了此插件外，<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a> 插件也可以生成非中文的链接。</p></blockquote><h3 id="文章字数统计插件（建议安装）"><a href="#文章字数统计插件（建议安装）" class="headerlink" title="文章字数统计插件（建议安装）"></a>文章字数统计插件（建议安装）</h3><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 <a href="https://github.com/willin/hexo-wordcount">hexo-wordcount</a>插件。</p><p>安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save hexo-wordcount</span><br></pre></td></tr></table></figure><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，将各个文章字数相关的配置激活即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">postInfo:</span></span><br><span class="line">  <span class="attr">date:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">update:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">wordCount:</span> <span class="literal">false</span> <span class="comment"># 设置文章字数统计为 true.</span></span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">false</span> <span class="comment"># 设置站点文章总字数统计为 true.</span></span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">false</span> <span class="comment"># 阅读时长.</span></span><br><span class="line">  <span class="attr">readCount:</span> <span class="literal">false</span> <span class="comment"># 阅读次数.</span></span><br></pre></td></tr></table></figure><h3 id="添加emoji表情支持（可选的）"><a href="#添加emoji表情支持（可选的）" class="headerlink" title="添加emoji表情支持（可选的）"></a>添加emoji表情支持（可选的）</h3><p>本主题新增了对<code>emoji</code>表情的支持，使用到了 <a href="https://npm.taobao.org/package/hexo-filter-github-emojis">hexo-filter-github-emojis</a> 的 Hexo 插件来支持 <code>emoji</code>表情的生成，把对应的<code>markdown emoji</code>语法（<code>::</code>,例如：<code>:smile:</code>）转变成会跳跃的<code>emoji</code>表情，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-filter-github-emojis --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br></pre></td></tr></table></figure><h3 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h3><p>本主题中还使用到了 <a href="https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">hub:</span></span><br><span class="line">  <span class="attr">content:</span></span><br><span class="line">  <span class="attr">content_limit:</span> <span class="number">140</span></span><br><span class="line">  <span class="attr">content_limit_delim:</span> <span class="string">&#x27; &#x27;</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 <code>public</code> 文件夹中即可看到 <code>atom.xml</code> 文件，说明你已经安装成功了。</p><h3 id="添加-DaoVoice-在线聊天功能（可选的）"><a href="#添加-DaoVoice-在线聊天功能（可选的）" class="headerlink" title="添加 DaoVoice 在线聊天功能（可选的）"></a>添加 <a href="http://www.daovoice.io/">DaoVoice</a> 在线聊天功能（可选的）</h3><p>前往 <a href="http://www.daovoice.io/">DaoVoice</a> 官网注册并且获取 <code>app_id</code>，并将 <code>app_id</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="添加-Tidio-在线聊天功能（可选的）"><a href="#添加-Tidio-在线聊天功能（可选的）" class="headerlink" title="添加 Tidio 在线聊天功能（可选的）"></a>添加 <a href="https://www.tidio.com/">Tidio</a> 在线聊天功能（可选的）</h3><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 <code>Public Key</code>，并将 <code>Public Key</code> 填入主题的 <code>_config.yml</code> 文件中。</p><h3 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h3><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><h3 id="修改社交链接"><a href="#修改社交链接" class="headerlink" title="修改社交链接"></a>修改社交链接</h3><p>在主题的 <code>_config.yml</code> 文件中，默认支持 <code>QQ</code>、<code>GitHub</code> 和邮箱等的配置，你可以在主题文件的 <code>/layout/_partial/social-link.ejs</code> 文件中，新增、修改你需要的社交链接地址，增加链接可参考如下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (theme.socialLink.github) &#123; %&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&lt;%= theme.socialLink.github %&gt;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;tooltipped&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> <span class="attr">data-tooltip</span>=<span class="string">&quot;访问我的GitHub&quot;</span> <span class="attr">data-position</span>=<span class="string">&quot;top&quot;</span> <span class="attr">data-delay</span>=<span class="string">&quot;50&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fab fa-github&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>其中，社交图标（如：<code>fa-github</code>）你可以在 <a href="https://fontawesome.com/icons">Font Awesome</a> 中搜索找到。以下是常用社交图标的标识，供你参考：</p><ul><li>Facebook: <code>fab fa-facebook</code></li><li>Twitter: <code>fab fa-twitter</code></li><li>Google-plus: <code>fab fa-google-plus</code></li><li>Linkedin: <code>fab fa-linkedin</code></li><li>Tumblr: <code>fab fa-tumblr</code></li><li>Medium: <code>fab fa-medium</code></li><li>Slack: <code>fab fa-slack</code></li><li>Sina Weibo: <code>fab fa-weibo</code></li><li>Wechat: <code>fab fa-weixin</code></li><li>QQ: <code>fab fa-qq</code></li><li>Zhihu: <code>fab fa-zhihu</code></li></ul><blockquote><p><strong>注意</strong>: 本主题中使用的 <code>Font Awesome</code> 版本为 <code>5.11.0</code>。</p></blockquote><h3 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h3><p>在主题文件的 <code>source/medias/reward</code> 文件中，你可以替换成你的的微信和支付宝的打赏二维码图片。</p><h3 id="配置音乐播放器（可选的）"><a href="#配置音乐播放器（可选的）" class="headerlink" title="配置音乐播放器（可选的）"></a>配置音乐播放器（可选的）</h3><p>要支持音乐播放，在主题的 <code>_config.yml</code> 配置文件中激活music配置即可：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否在首页显示音乐</span></span><br><span class="line"><span class="attr">music:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span>         <span class="comment"># 非吸底模式有效</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">show:</span> <span class="string">听听音乐</span></span><br><span class="line">  <span class="attr">server:</span> <span class="string">netease</span>   <span class="comment"># require music platform: netease, tencent, kugou, xiami, baidu</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">playlist</span>    <span class="comment"># require song, playlist, album, search, artist</span></span><br><span class="line">  <span class="attr">id:</span> <span class="number">503838841</span>     <span class="comment"># require song id / playlist id / album id / search keyword</span></span><br><span class="line">  <span class="attr">fixed:</span> <span class="literal">false</span>      <span class="comment"># 开启吸底模式</span></span><br><span class="line">  <span class="attr">autoplay:</span> <span class="literal">false</span>   <span class="comment"># 是否自动播放</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;#42b983&#x27;</span></span><br><span class="line">  <span class="attr">loop:</span> <span class="string">&#x27;all&#x27;</span>       <span class="comment"># 音频循环播放, 可选值: &#x27;all&#x27;, &#x27;one&#x27;, &#x27;none&#x27;</span></span><br><span class="line">  <span class="attr">order:</span> <span class="string">&#x27;random&#x27;</span>   <span class="comment"># 音频循环顺序, 可选值: &#x27;list&#x27;, &#x27;random&#x27;</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="string">&#x27;auto&#x27;</span>   <span class="comment"># 预加载，可选值: &#x27;none&#x27;, &#x27;metadata&#x27;, &#x27;auto&#x27;</span></span><br><span class="line">  <span class="attr">volume:</span> <span class="number">0.7</span>       <span class="comment"># 默认音量，请注意播放器会记忆用户设置，用户手动设置音量后默认音量即失效</span></span><br><span class="line">  <span class="attr">listFolded:</span> <span class="literal">true</span>  <span class="comment"># 列表默认折叠</span></span><br></pre></td></tr></table></figure><blockquote><p><code>server</code>可选<code>netease</code>（网易云音乐），<code>tencent</code>（QQ音乐），<code>kugou</code>（酷狗音乐），<code>xiami</code>（虾米音乐），</p><p><code>baidu</code>（百度音乐）。</p><p><code>type</code>可选<code>song</code>（歌曲），<code>playlist</code>（歌单），<code>album</code>（专辑），<code>search</code>（搜索关键字），<code>artist</code>（歌手）</p><p><code>id</code>获取方法示例: 浏览器打开网易云音乐，点击我喜欢的音乐歌单，浏览器地址栏后面会有一串数字，<code>playlist</code>的<code>id</code></p><p>即为这串数字。</p></blockquote><h2 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h2><h3 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h3><p><code>Front-matter</code> 选项中的所有内容均为<strong>非必填</strong>的。但我仍然建议至少填写 <code>title</code> 和 <code>date</code> 的值。</p><table><thead><tr><th>配置选项</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>title</td><td><code>Markdown</code> 的文件标题</td><td>文章标题，强烈建议填写此选项</td></tr><tr><td>date</td><td>文件创建时的日期时间</td><td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td>author</td><td>根 <code>_config.yml</code> 中的 <code>author</code></td><td>文章作者</td></tr><tr><td>img</td><td><code>featureImages</code> 中的某个值</td><td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.如: <code>http://xxx.com/xxx.jpg</code></td></tr><tr><td>top</td><td><code>true</code></td><td>推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td>cover</td><td><code>false</code></td><td><code>v1.0.2</code>版本新增，表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td>coverImg</td><td>无</td><td><code>v1.0.2</code>版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td>password</td><td>无</td><td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td>toc</td><td><code>true</code></td><td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td>mathjax</td><td><code>false</code></td><td>是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td>summary</td><td>无</td><td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td>categories</td><td>无</td><td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td>tags</td><td>无</td><td>文章标签，一篇文章可以多个标签</td></tr><tr><td>keywords</td><td>文章标题</td><td>文章关键字，SEO 时需要</td></tr><tr><td>reprintPolicy</td><td>cc_by</td><td>文章转载规则， 可以是 cc_by, cc_by_nd, cc_by_sa, cc_by_nc, cc_by_nc_nd, cc_by_nc_sa, cc0, noreprint 或 pay 中的一个</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><ol><li>如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章的特色图<strong>各有特色</strong>。</li><li><code>date</code> 的值尽量保证每篇文章是唯一的，因为本主题中 <code>Gitalk</code> 和 <code>Gitment</code> 识别 <code>id</code> 是通过 <code>date</code> 的值来作为唯一标识的。</li><li>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 <code>_config.yml</code> 中激活了配置。有些在线的 SHA256 加密的地址，可供你使用：<a href="http://tool.oschina.net/encrypt?type=2">开源中国在线工具</a>、<a href="http://encode.chahuo.com/">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx">站长工具</a>。</li><li>您可以在文章md文件的 front-matter 中指定 reprintPolicy 来给单个文章配置转载规则</li></ol></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><h3 id="最简示例"><a href="#最简示例" class="headerlink" title="最简示例"></a>最简示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">typora-vue-theme主题介绍</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-09-07 09:25:00</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">赵奇</span></span><br><span class="line"><span class="attr">img:</span> <span class="string">/source/images/xxx.jpg</span></span><br><span class="line"><span class="attr">top:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">cover:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">coverImg:</span> <span class="string">/images/1.jpg</span></span><br><span class="line"><span class="attr">password:</span> <span class="string">8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92</span></span><br><span class="line"><span class="attr">toc:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">summary:</span> <span class="string">这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">Markdown</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Typora</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Markdown</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><h2 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h2><p><img src="http://static.blinkfox.com/matery-20181202-1.png" alt="首页"></p><p><img src="http://static.blinkfox.com/matery-20181202-2.png" alt="首页推荐文章"></p><p><img src="http://static.blinkfox.com/matery-20181202-3.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-7.png" alt="首页文章列表"></p><p><img src="http://static.blinkfox.com/matery-20181202-8.png" alt="首页文章列表"></p><h2 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h2><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li><code>favicon</code> 和 <code>Logo</code></li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li><code>Gitalk</code>、<code>Gitment</code>、<code>Valine</code> 和 <code>disqus</code> 评论配置</li><li><a href="http://busuanzi.ibruce.info/">不蒜子统计</a>和谷歌分析（<code>Google Analytics</code>）</li><li>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 <code>hashcode</code> 值取余，来选择展示对应的特色图</li></ul><p><strong>我认为个人博客应该都有自己的风格和特色</strong>。如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能对你有用的地方：</p><h3 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h3><p>在主题文件的 <code>/source/css/matery.css</code> 文件中，搜索 <code>.bg-color</code> 来修改背景颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */</span></span><br><span class="line"><span class="selector-class">.bg-color</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#4cbf30</span> <span class="number">0%</span>, <span class="number">#0f9d58</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@-webkit-keyframes</span> rainbow &#123;</span><br><span class="line">   <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> rainbow &#123;</span><br><span class="line">    <span class="comment">/* 动态切换背景颜色. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h3><p>你可以直接在 <code>/source/medias/banner</code> 文件夹中更换你喜欢的 <code>banner</code> 图片，主题代码中是每天动态切换一张，只需 <code>7</code> 张即可。如果你会 <code>JavaScript</code> 代码，可以修改成你自己喜欢切换逻辑，如：随机切换等，<code>banner</code> 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <code>&lt;script&gt;&lt;/script&gt;</code> 代码中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;.bg-cover&#x27;</span>).css(<span class="string">&#x27;background-image&#x27;</span>, <span class="string">&#x27;url(/medias/banner/&#x27;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">&#x27;.jpg)&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 <code>_config.yml</code> 做同步修改。</p><h2 id="版本变更记录"><a href="#版本变更记录" class="headerlink" title="版本变更记录"></a>版本变更记录</h2><p>参见 <a href="https://github.com/blinkfox/hexo-theme-matery/blob/master/README.md">CHANGELOG.md</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云扑面</title>
      <link href="/yunpumian/2021/06/03/%E4%BA%91%E6%89%91%E9%9D%A2/"/>
      <url>/yunpumian/2021/06/03/%E4%BA%91%E6%89%91%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<p>已经结束的，就已经结束了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ服务配置</title>
      <link href="/yunpumian/2021/06/03/RabbitMQ%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/"/>
      <url>/yunpumian/2021/06/03/RabbitMQ%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-启动服务"><a href="#1-启动服务" class="headerlink" title="1.启动服务"></a>1.启动服务</h1><p>systemctl start rabbitmq-server.service</p><h1 id="2-设置开机启动"><a href="#2-设置开机启动" class="headerlink" title="2.设置开机启动"></a>2.设置开机启动</h1><p>systemctl enable rabbitmq-server.service</p><h1 id="3-停止开机启动"><a href="#3-停止开机启动" class="headerlink" title="3.停止开机启动"></a>3.停止开机启动</h1><p>systemctl disable rabbitmq-server.service</p><h1 id="4-重新启动服务"><a href="#4-重新启动服务" class="headerlink" title="4.重新启动服务"></a>4.重新启动服务</h1><p>systemctl restart rabbitmq-server.service</p><h1 id="5-查看服务当前状态"><a href="#5-查看服务当前状态" class="headerlink" title="5.查看服务当前状态"></a>5.查看服务当前状态</h1><p>systemctl status rabbitmq-server.service</p><h1 id="6-查看所有已启动服务"><a href="#6-查看所有已启动服务" class="headerlink" title="6.查看所有已启动服务"></a>6.查看所有已启动服务</h1><p>systemctl list-units –type=service<br>————————————————</p><h1 id="7-防火墙："><a href="#7-防火墙：" class="headerlink" title="7.防火墙："></a>7.防火墙：</h1><p>firewall-cmd –zone=public –add-port=15672/tcp –permanent #网页端口<br>firewall-cmd –zone=public –add-port=5672/tcp –permanent  #AMQP端口,java使用<br>firewall-cmd –reload # 重新加载</p><h1 id="8-显示所有服务的运行状态"><a href="#8-显示所有服务的运行状态" class="headerlink" title="8.显示所有服务的运行状态"></a>8.显示所有服务的运行状态</h1><p>service –status-all</p>]]></content>
      
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis笔记</title>
      <link href="/yunpumian/2021/06/02/redis%E7%AC%94%E8%AE%B0/"/>
      <url>/yunpumian/2021/06/02/redis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="reids笔记"><a href="#reids笔记" class="headerlink" title="reids笔记:"></a>reids笔记:</h1><p>切换数据库:select 几;<br>dbsize ;数据库大小<br>set key-键名 values–值;<br>get key–键名</p><p>默认16个数据库</p><p>keys * 查看所有的key</p><p>清空当前： flushdb<br>清空全部库的内容：flushall<br>端口号历史：6379 意大利女星（粉丝效应）<br>redis是单线程的，redis是基于内存操作的，cpu不是redis的性能瓶颈，<br>redis是根据机器的内存和网络带宽，既然可以使用单线程就使用单线程；<br>为什么单线程还很快；<br>redis是C语言写的，官方提供的数据为100000+的QPS,完全不比同样使用key-values<br>的memecache差；<br>1.误区1：高性能的服务器一定是多线程的<br>2.误区2：多线程（CPU上下文会切换）一定比单线程效率高<br>核心：redis是将所有的数据全部放在内存中的，所以说使用单线程去操作效率是最高的<br>多线程（上下文会切换；耗时的操作）对应内存系列来说，没有上下文切换就是最高的！<br>多次读写都是在一个CPU上的，在内存情况下，这就是最佳的方案；</p><h2 id="redis用途："><a href="#redis用途：" class="headerlink" title="redis用途："></a>redis用途：</h2><p>数据库，缓存，消息中间件MQ;</p><h2 id="Redis-key："><a href="#Redis-key：" class="headerlink" title="Redis -key："></a>Redis -key：</h2><p> key* :查看所有key<br> set :添加key<br> exists key:判断是不是存在key<br>expire key time :设置key 的过期时间<br>ttl key ：查看key的剩余时间<br>type key :key的类型<br>move key 1:移动key到数据库1<br>APPEND key1 “hello” ：给key1追加hello，如果当前的key不存在就新建了一个key1<br>strlen key1:字符串长度<br>incr :自增1<br>decr:自减一<br>string：<br>incrby:设置步长<br>decrby:<br>GETRANGE key1 0 3  ：截取key1 0-3的值：闭区间<br>GETRANGE key1 0 3-1；获取全部值<br>SETRANGE key2 1 xx : 替换指定位置的值；</p><p>setex(set with ecxpire):设置过期时间<br>setex key2 30 “hello”<br>setnx(set if no exist) :不存在设置（在分布式锁中常常使用）,如果不存在就设置成功，<br>如果存在设置失败</p><p>mset :批量设置;<br>mset key1 v1 key2 v2<br>mget:批量获取<br>mget key1 key2<br>msetnx:是一个原子性的操作，要么一起成功，要么一起失败；<br>对象：<br>set user:1{name:zhangsan,age:23}:设置user:1对象 值为JSON字符保存为一个<br>这里的key是一个巧妙的设计，user：{id}:{filed}；<br>getset先get再set；</p><p>string类似的技术使用场景:value除了是我们的字符串还可以是我们的数字！<br>计数器；<br>统计多单位的数量<br>粉丝数<br>对象缓存</p><h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>在redis里面可以把list，栈，队列，或者阻塞队列；<br>所有的list命令都是l开头的。<br>LPUSH list one :将一个值或者多个值，插入列表头部（左边）<br>Rpush list value:将一个值或者多个值，插入到列表的尾部（右边）<br>LRANGE list 0 -1:获取列表具体的值！<br>Lpop:移除值，左移除<br>RPOP:右移除<br>lindex list 1:通过下标获得list中的某一个值；<br>llen:返回列表的长度<br>移除指定值：<br>取关：<br>Lrem list 1 one //移除list集合中指定个数的values;</p><p>ltrim mylist 1 2 :通过下标截取指定的长度，这个list已经改变，截断了<br>只剩下截取的</p><p>RPOPLPUSH：移除列表的最后一个元素，将他移动到新的列表中<br>lset:将列表中指定下标的值替换为另外一个值，更新操作；<br>先判断列表是否存在<br>如果不存在就会报错；<br>linsert mylist before “wordld” “other”:在world前面插入other<br>它实际上是一个链表，before Node after ,left right都可以插入值；<br>如果key不存在，创建新的链表<br>如果key存在，新增内容；<br>如果移除了所有值，空链表，也代表不存在；<br>在两边插入或者改动值，效率最高，中间元素，相对来说效率会低一点，<br>消息排队，消息队列，栈</p><h3 id="set"><a href="#set" class="headerlink" title="set"></a>set</h3><p>set中的值是没有重复的；<br>sadd ；添加值<br>smembers:查看所有值<br>sismember:判断值<br>scard:获取set集合元素中的个数<br>srem:移除<br>srandmember；获取随机值<br>set集合：无序不重复<br>spop：随机删除一个值；<br>smove:移动  同list方法<br>共同关注（并集）:<br>sdiff:差集；<br>sinter:交集<br>sunion:并集；</p><p>六度分隔理论（推荐好友）</p><h3 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h3><p>hsah：map集合，key-values:<br>hset :添加<br>hget：获取<br>hmset:批量添加<br>hmget：批量获取</p><p>hgetall:获取所有；本质和String没有太大区别<br>hlen:获取hash表的字段数量<br>hexists:判断是否存在<br>只是获取所有的key:hkeys<br>获取所有的values:hvals;<br>hash变更的数据，user,name,age，尤其是用户信息之类的，经常变更的信息，hash<br>更适合对象的存储；<br>Zset（有序集合）<br>在set的基础上，添加了一个值；<br>zadd :添加；</p><h3 id="三种特殊数据类型；"><a href="#三种特殊数据类型；" class="headerlink" title="三种特殊数据类型；"></a>三种特殊数据类型；</h3><p>geospatial:地理位置；<br>朋友的地位，附近的人，打车距离的计算？<br>getadd:添加地理位置<br>规则：两级无法添加<br>我附近的人？（获得所有附近的人的地址，定位）通过半径来查询</p><p>Hyerloglog:基数统计的算法<br>bitmaps:位图；统计用户信息，活跃，不活跃，登录，未登录</p><p>redis事务:一组命令的集合，一个事务中的所有命令都会被序列化，<br>在事务执行过程中，会按照顺序执行；</p><p>redis单条命令是保存原子性的，但是事务不保证原子性；<br>redis事务没有隔离级别的概念<br>事务：<br>开启事务（Multi）<br>事务入队（）<br>执行事务（exec）</p><p>编译型异常（代码有问题|命令有错），事务中所有的命令都不会被执行!</p><h3 id="在事务中写的命令有错误；"><a href="#在事务中写的命令有错误；" class="headerlink" title="在事务中写的命令有错误；"></a>在事务中写的命令有错误；</h3><p>运行时异常：如果事务队列中存在语法性，那么执行命令的时候，其他命令是可以正常执行的，错误命令抛异常；<br>语法没有错，逻辑，比如给string进行自增长；</p><p>锁：Redis可以实现乐观锁<br>用watch监控</p><p>Jedis操作redis数据库:<br>1.Jedis单机连接;<br>2.JedisPool:连接池连接：<br>3.使用JedisCluster连接redis集群：</p><p>所有的对象需要序列化</p>]]></content>
      
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis笔记</title>
      <link href="/yunpumian/2021/06/02/mybatis%E7%AC%94%E8%AE%B0/"/>
      <url>/yunpumian/2021/06/02/mybatis%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>Mybatis笔记：</p><p>1.mybatis的事务管理有两个，一个是JDBC（提交和事务回滚）一个是Managed<br>2.datasource:三种数据源类型–》UNPOOLED（请求一次就要关闭和打开） ,POOLED(可以回收),JNDI<br>3.properties（属性）可以读取配置文件。可以直接引入外部属性配置，可以在其中增加一些属性配置；<br>eg:<properties resource='db.properties'>(包含username)<br>===<br><properties resource ='db.properties'>–&gt;不包含username;<br><property name='username' password='12356'><br></properties><br>4.xml中所有的标签都有顺序。<br>5.<typeAliases>别名<br>eg1:<typeAliases><br>        <typeAlias type='包名' alias='别名'><br></typeAliases><br>eg2:<br><typeAliases><br><package name='pojo（具体的包名）'/>–&gt;默认别名为类名的首字母小写<br></typeAliases></p><p>或者：注解写别名：需要先扫描包；<br>@Alias()</p><p>6：附加：int与integer的区别：Integer的int的包装类，int的基本的数据类型；Integer变量必须实例化之后才能使用，而int变量不需要实例化。</p><p>一、区别：<br>1.Integer是int的包装类，int则是java的一种基本的数据类型；</p><p>2.Integer变量必须实例化之后才能使用，而int变量不需要实例化；</p><p>3.Integer实际是对象的引用，当new一个Integer时，实际上生成一个指针指向对象，而int则直接存储数值</p><p>4.Integer的默认值是null，而int的默认值是0。</p><p>7.mpper的类名和包名必须一致。<br>接口和他的Mapper配置文件必须在一个包里面。使用扫描包进行注入绑定</p><p>8.生命周期和作用域：<br>sqlsessionFactoryBuilder:(局部变量,只是创建sqlsessionFactory一旦创建就不需要了)<br>sqlsessionFactory:单例模式或者静态单例模式，作用域为Application；<br>sqlsession;连接到一个连接池的一个请求，sqlsession不是线程安全的，因此不能被共享的，<br>所以它的最佳作用域是请求或方法作用域；<br>用完就需要马上关闭。</p><p>9.日志：<br>日志工厂：如果一个数据库操作，出现了异常，需要排除；<br>Log4j:<br>STDOUT_LOGGING:</p><p>10:分页：RowBounds分页；</p><p>RowBounds rw=new RowBounds();<br>sql.selectList(“mapper方法：eg:com.coupon.pojo.UserMapper.selectTestAll”,null,rw);可以实现分页</p><p>11：面向接口编程：<br>根本原因：解耦，<br>面向对象是指：我们考虑问题时，以对象为单位，考虑他的属性及方法；<br>面向过程是指：我们考虑问题时，以一个具体的流程（事务过程）为单位，考取他的实现<br>接口设计与接口设计是针对复用技术而言的，与面向对象（过程）不是一个问题。更多的是对系统的架构</p><p>注解：在接口上实现</p><p>本质：反射机制的实现<br>底层:动态代理；</p><p>12：MyBatis执行流程：</p><p>Resource获取加载全局配置文件；<br>        实例化sqlSessionFactoryBuilder构造器；<br>        解析配置文件流XMLConfigBuilder<br>         configuration的配置信息；<br>         SqlSessionFactory实例化<br>–&gt;transactional（事务）<br>         创建excultor执行器；<br>    创建Sqlsession;<br>实现CROUD(出现问题回滚到事务)<br>–&gt;查看是否执行成功–YES》执行事务<br>        –NO》执行回滚</p><p>13：#{}可以防止sql注入 ，${}不能防止sql注入；</p><p>14：lombok；@Data:无参构造，get,set，toString,hashcode,equals<br>@AllArgsConstructor(有参构造)<br>@NoArgsConstructor（无参构造 ）</p><p>15：association（多对一）:对象<br>collection（一对多）：集合</p><p>16：缓存：存在内存中的临时数据，将用户经常查询的数据放在缓存（内存中），用户去查询数据就不用从磁盘上（关系型数据库数据文件）直接查询，从缓存中查询，从而提升查询效率，解决高并发问题</p><p>17.mybatis清除策略：LRU（最近最少使用，移除最长时间不被使用的对象），FIFO(先进先出),SOFT(软引用)：基于垃圾回收器状态和软引用规则移除对象。WEAK–（弱引用）更积极地基于垃圾收集器状态和弱引用规则移除对象 。</p><p>一级缓存也叫本地缓存：Sqlsession:<br>1.与数据库同一次会话期间查询到的数据会放在本地缓存中，<br>2.以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；<br>映射语句文件中的select的结果将会被缓存，insert，update,delete语句会刷新缓存。<br>         一级缓存默认是开启的，只在一个sqlsession中有效；一级缓存就是一个map</p><p>二级缓存：也叫全局缓存，一级缓存作用域太低，基于namespace级别的缓存，一个名称空间，对应一个二级缓存。<br>工作机制:一个会话查询一条数据，这个数据就会被存放在当前会话的一级缓存中；<br>如果当前会话关闭了，这个会话的一级缓存就没有了，但是我们想要的是会话关闭了，一级缓存中的数据被保存到二级缓存中。<br>新的会话查询信息，就可以从二级缓存中获取内容l<br>不同的mapper查出的数据会放在自己对应的缓存（map）中</p><p>步骤：在mybatis.xml中开启全局缓存<br>1.<br>&lt;setting name=’’cacheEnabled’’ value=”true”&gt;<br>2.在要使用二级缓存的Mapper中开启：<br><cache/></p><p>二级缓存：只要开启了二级缓存，在同一个Mapper下就有效<br>所有的数据就会先放在一级缓存中；<br>只有当会话提交，或者关闭的时候，才会提交到二级缓存中。</p><p>缓存原理:<br>缓存顺序：<br>1.第一次先看二级缓存中有没有<br>2.再看一级缓存<br>3.查询数据库。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二维码生成</title>
      <link href="/yunpumian/2021/06/02/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90/"/>
      <url>/yunpumian/2021/06/02/%E4%BA%8C%E7%BB%B4%E7%A0%81%E7%94%9F%E6%88%90/</url>
      
        <content type="html"><![CDATA[<p>二维码生成工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.erweima;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.LuminanceSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.geom.AffineTransform;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> :wn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span> : erweima</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@descript</span> :</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> :2021-01-31 21:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferedImageLuminanceSource</span> <span class="keyword">extends</span> <span class="title">LuminanceSource</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> BufferedImage image;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> left;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(image, <span class="number">0</span>, <span class="number">0</span>, image.getWidth(), image.getHeight());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BufferedImageLuminanceSource</span><span class="params">(BufferedImage image, <span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(width, height);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        <span class="keyword">if</span> (left + width &gt; sourceWidth || top + height &gt; sourceHeight) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Crop rectangle does not fit within image data.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = top; y &lt; top + height; y++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = left; x &lt; left + width; x++) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((image.getRGB(x, y) &amp; <span class="number">0xFF000000</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">                    image.setRGB(x, y, <span class="number">0xFFFFFFFF</span>);</span><br><span class="line">                    <span class="comment">// = white</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.image = <span class="keyword">new</span> BufferedImage(sourceWidth, sourceHeight, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        <span class="keyword">this</span>.image.getGraphics().drawImage(image, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.top = top;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getRow(<span class="keyword">int</span> y, <span class="keyword">byte</span>[] row) &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &lt; <span class="number">0</span> || y &gt;= getHeight()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Requested row is outside the image: &quot;</span> + y);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">if</span> (row == <span class="keyword">null</span> || row.length &lt; width) &#123;</span><br><span class="line">            row = <span class="keyword">new</span> <span class="keyword">byte</span>[width];</span><br><span class="line">        &#125;</span><br><span class="line">        image.getRaster().getDataElements(left, top + y, width, <span class="number">1</span>, row);</span><br><span class="line">        <span class="keyword">return</span> row;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getMatrix() &#123;</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">int</span> height = getHeight();</span><br><span class="line">        <span class="keyword">int</span> area = width * height;</span><br><span class="line">        <span class="keyword">byte</span>[] matrix = <span class="keyword">new</span> <span class="keyword">byte</span>[area];</span><br><span class="line">        image.getRaster().getDataElements(left, top, width, height, matrix);</span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isCropSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">crop</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> top, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(image, <span class="keyword">this</span>.left + left, <span class="keyword">this</span>.top + top, width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isRotateSupported</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LuminanceSource <span class="title">rotateCounterClockwise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sourceWidth = image.getWidth();</span><br><span class="line">        <span class="keyword">int</span> sourceHeight = image.getHeight();</span><br><span class="line">        AffineTransform transform = <span class="keyword">new</span> AffineTransform(<span class="number">0.0</span>, -<span class="number">1.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, sourceWidth);</span><br><span class="line">        BufferedImage rotatedImage = <span class="keyword">new</span> BufferedImage(sourceHeight, sourceWidth, BufferedImage.TYPE_BYTE_GRAY);</span><br><span class="line">        Graphics2D g = rotatedImage.createGraphics();</span><br><span class="line">        g.drawImage(image, transform, <span class="keyword">null</span>);</span><br><span class="line">        g.dispose();</span><br><span class="line">        <span class="keyword">int</span> width = getWidth();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> BufferedImageLuminanceSource(rotatedImage, top, sourceWidth - (left + width), getHeight(), width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line">package com.erweima;</span><br><span class="line"></span><br><span class="line">import com.google.zxing.*;</span><br><span class="line">import com.google.zxing.common.BitMatrix;</span><br><span class="line">import com.google.zxing.common.HybridBinarizer;</span><br><span class="line">import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.geom.RoundRectangle2D;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.OutputStream;</span><br><span class="line">import java.util.Hashtable;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author :wn</span><br><span class="line"> * @program : erweima</span><br><span class="line"> * @descript :</span><br><span class="line"> * @create :2021-01-31 21:22</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class QRCodeUtil &#123;</span><br><span class="line">    private static final String CHARSET = &quot;utf-8&quot;;</span><br><span class="line">    private static final String FORMAT_NAME = &quot;JPG&quot;;</span><br><span class="line">    // 二维码尺寸</span><br><span class="line">    private static final int QRCODE_SIZE = 300;</span><br><span class="line">    // LOGO宽度</span><br><span class="line">    private static final int WIDTH = 60;</span><br><span class="line">    // LOGO高度</span><br><span class="line">    private static final int HEIGHT = 60;</span><br><span class="line"></span><br><span class="line">    private static BufferedImage createImage(String content, String imgPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        Hashtable hints = new Hashtable();</span><br><span class="line">        hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);</span><br><span class="line">        hints.put(EncodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        hints.put(EncodeHintType.MARGIN, 1);</span><br><span class="line">        BitMatrix bitMatrix = new MultiFormatWriter().encode(content, BarcodeFormat.QR_CODE, QRCODE_SIZE, QRCODE_SIZE,</span><br><span class="line">                hints);</span><br><span class="line">        int width = bitMatrix.getWidth();</span><br><span class="line">        int height = bitMatrix.getHeight();</span><br><span class="line">        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        for (int x = 0; x &lt; width; x++) &#123;</span><br><span class="line">            for (int y = 0; y &lt; height; y++) &#123;</span><br><span class="line">                image.setRGB(x, y, bitMatrix.get(x, y) ? 0xFF000000 : 0xFFFFFFFF);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if (imgPath == null || &quot;&quot;.equals(imgPath)) &#123;</span><br><span class="line">            return image;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插入图片</span><br><span class="line">        QRCodeUtil.insertImage(image, imgPath, needCompress);</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void insertImage(BufferedImage source, String imgPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        File file = new File(imgPath);</span><br><span class="line">        if (!file.exists()) &#123;</span><br><span class="line">            System.err.println(&quot;&quot; + imgPath + &quot;   该文件不存在！&quot;);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        Image src = ImageIO.read(new File(imgPath));</span><br><span class="line">        int width = src.getWidth(null);</span><br><span class="line">        int height = src.getHeight(null);</span><br><span class="line">        if (needCompress) &#123; // 压缩LOGO</span><br><span class="line">            if (width &gt; WIDTH) &#123;</span><br><span class="line">                width = WIDTH;</span><br><span class="line">            &#125;</span><br><span class="line">            if (height &gt; HEIGHT) &#123;</span><br><span class="line">                height = HEIGHT;</span><br><span class="line">            &#125;</span><br><span class="line">            Image image = src.getScaledInstance(width, height, Image.SCALE_SMOOTH);</span><br><span class="line">            BufferedImage tag = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);</span><br><span class="line">            Graphics g = tag.getGraphics();</span><br><span class="line">            g.drawImage(image, 0, 0, null); // 绘制缩小后的图</span><br><span class="line">            g.dispose();</span><br><span class="line">            src = image;</span><br><span class="line">        &#125;</span><br><span class="line">        // 插入LOGO</span><br><span class="line">        Graphics2D graph = source.createGraphics();</span><br><span class="line">        int x = (QRCODE_SIZE - width) / 2;</span><br><span class="line">        int y = (QRCODE_SIZE - height) / 2;</span><br><span class="line">        graph.drawImage(src, x, y, width, height, null);</span><br><span class="line">        Shape shape = new RoundRectangle2D.Float(x, y, width, width, 6, 6);</span><br><span class="line">        graph.setStroke(new BasicStroke(3f));</span><br><span class="line">        graph.draw(shape);</span><br><span class="line">        graph.dispose();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String imgPath, String destPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        mkdirs(destPath);</span><br><span class="line">        // String file = new Random().nextInt(99999999)+&quot;.jpg&quot;;</span><br><span class="line">        // ImageIO.write(image, FORMAT_NAME, new File(destPath+&quot;/&quot;+file));</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, new File(destPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static BufferedImage encode(String content, String imgPath, boolean needCompress) throws Exception &#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        return image;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void mkdirs(String destPath) &#123;</span><br><span class="line">        File file = new File(destPath);</span><br><span class="line">        // 当文件夹不存在时，mkdirs会自动创建多层目录，区别于mkdir．(mkdir如果父目录不存在则会抛出异常)</span><br><span class="line">        if (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String imgPath, String destPath) throws Exception &#123;</span><br><span class="line">        QRCodeUtil.encode(content, imgPath, destPath, false);</span><br><span class="line">    &#125;</span><br><span class="line">    public static void encode(String content, String destPath) throws Exception &#123;</span><br><span class="line">        QRCodeUtil.encode(content, null, destPath, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, String imgPath, OutputStream output, boolean needCompress)</span><br><span class="line">            throws Exception &#123;</span><br><span class="line">        BufferedImage image = QRCodeUtil.createImage(content, imgPath, needCompress);</span><br><span class="line">        ImageIO.write(image, FORMAT_NAME, output);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void encode(String content, OutputStream output) throws Exception &#123;</span><br><span class="line">        QRCodeUtil.encode(content, null, output, false);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String decode(File file) throws Exception &#123;</span><br><span class="line">        BufferedImage image;</span><br><span class="line">        image = ImageIO.read(file);</span><br><span class="line">        if (image == null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        BufferedImageLuminanceSource source = new BufferedImageLuminanceSource(image);</span><br><span class="line">        BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));</span><br><span class="line">        Result result;</span><br><span class="line">        Hashtable hints = new Hashtable();</span><br><span class="line">        hints.put(DecodeHintType.CHARACTER_SET, CHARSET);</span><br><span class="line">        result = new MultiFormatReader().decode(bitmap, hints);</span><br><span class="line">        String resultStr = result.getText();</span><br><span class="line">        return resultStr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static String decode(String path) throws Exception &#123;</span><br><span class="line">        return QRCodeUtil.decode(new File(path));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Test"><a href="#Test" class="headerlink" title="Test:"></a>Test:</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">import com.erweima.QRCodeUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author :wn</span><br><span class="line"> * @program : erweima</span><br><span class="line"> * @descript :</span><br><span class="line"> * @create :2021-01-31 21:24</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">public class test &#123;</span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        String text=&quot;https://www.baidu.com/&quot;;</span><br><span class="line">        String imagePath=&quot;C:\\Users\\86152\\Desktop\\图片\\16.jpg&quot;;</span><br><span class="line">        String destPath = &quot;C:\\Users\\86152\\Desktop\\图片\\jam1.jpg&quot;;</span><br><span class="line">        //生成二维码</span><br><span class="line">        QRCodeUtil.encode(text, imagePath, destPath, true);</span><br><span class="line">        // 解析二维码</span><br><span class="line">        String str = QRCodeUtil.decode(destPath);//解密</span><br><span class="line">        // 打印出解析出的内容</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二维码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集成druid后台监控</title>
      <link href="/yunpumian/2021/06/02/%E9%9B%86%E6%88%90druid%E5%90%8E%E5%8F%B0%E7%9B%91%E6%8E%A7/"/>
      <url>/yunpumian/2021/06/02/%E9%9B%86%E6%88%90druid%E5%90%8E%E5%8F%B0%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.alibaba.druid.support.http.StatViewServlet&lt;/servlet-class&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;!--允许清空统计数据--&gt;</span><br><span class="line">            &lt;param-name&gt;resetEnable&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;true&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;!--用户名--&gt;</span><br><span class="line">            &lt;param-name&gt;loginUsername&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;kids&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">        &lt;init-param&gt;</span><br><span class="line">            &lt;!--密码--&gt;</span><br><span class="line">            &lt;param-name&gt;loginPassword&lt;/param-name&gt;</span><br><span class="line">            &lt;param-value&gt;1123&lt;/param-value&gt;</span><br><span class="line">        &lt;/init-param&gt;</span><br><span class="line">    &lt;/servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;DruidStatView&lt;/servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;/druid/*&lt;/url-pattern&gt;</span><br><span class="line">    &lt;/servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>spring-dao里面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">datasource&lt;property name=&quot;filters&quot; value=&quot;stat&quot;/&gt;</span><br><span class="line">&lt;bean id=&quot;druid-stat-interceptor&quot; class=&quot;com.alibaba.druid.support.spring.stat.DruidStatInterceptor&quot;&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!--切点--&gt;</span><br><span class="line">&lt;bean id=&quot;druid-stat-pointcut&quot; class=&quot;org.springframework.aop.support.JdkRegexpMethodPointcut&quot; scope=&quot;prototype&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;patterns&quot;&gt;</span><br><span class="line">        &lt;list&gt;</span><br><span class="line">            &lt;value&gt;com.jarvis.service.*&lt;/value&gt;</span><br><span class="line">        &lt;/list&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/bean&gt;</span><br><span class="line">&lt;!--切面=切点+通知--&gt;</span><br><span class="line">&lt;aop:config&gt;</span><br><span class="line">    &lt;aop:advisor advice-ref=&quot;druid-stat-interceptor&quot; pointcut-ref=&quot;druid-stat-pointcut&quot;/&gt;</span><br><span class="line">&lt;/aop:config&gt;</span><br><span class="line"></span><br><span class="line">springboot:config：配置类</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;all&quot;)</span><br><span class="line">@Configuration</span><br><span class="line">public class DruidConfig  &#123;</span><br><span class="line"></span><br><span class="line">    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><br><span class="line">    @Bean</span><br><span class="line">   public DataSource druidDataSource()&#123;</span><br><span class="line">        return new DruidDataSource();</span><br><span class="line">    &#125;</span><br><span class="line">    //后台监控</span><br><span class="line">    @Bean</span><br><span class="line">    public ServletRegistrationBean add()&#123;</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = new ServletRegistrationBean&lt;&gt;(new StatViewServlet(), &quot;/druid/*&quot;);</span><br><span class="line"></span><br><span class="line">        //后台需要有人登录</span><br><span class="line">        HashMap&lt;String,String&gt; initParameter = new HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        initParameter.put(&quot;loginUsername&quot;,&quot;&quot;);</span><br><span class="line">        initParameter.put(&quot;loginPassword&quot;,&quot;&quot;);</span><br><span class="line">        //允许谁访问</span><br><span class="line">         bean.setInitParameters(initParameter);</span><br><span class="line">        return bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">spring:</span><br><span class="line">    datasource:</span><br><span class="line">      password: </span><br><span class="line">      username: root</span><br><span class="line">      url: jdbc:mysql://localhost:3306/hibernate_demo1</span><br><span class="line">      driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">      type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">      #druid数据源专有配置</span><br><span class="line">      initialSize: 5</span><br><span class="line">      minIdle: 5</span><br><span class="line">      maxActive: 20</span><br><span class="line">      maxWait: 60000</span><br><span class="line">      timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">      minEvictableIdleTimeMillis: 300000</span><br><span class="line">      validationQuery: SELECT 1</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testOnReturn: false</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line"></span><br><span class="line">      #配置监控统计拦截的filters，stat：监控统计、log4j：日志记录、wall：防御sql注入</span><br><span class="line">      #如果允许报错，java.lang.ClassNotFoundException: org.apache.Log4j.Properity</span><br><span class="line">      #则导入log4j 依赖就行</span><br><span class="line">      filters: stat,wall,log4j</span><br><span class="line">      maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">      useGlobalDataSourceStat: true</span><br><span class="line">      connectionoProperties: druid. stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><br><span class="line">          </span><br><span class="line"></span><br><span class="line"> springboot yml:格式配置:</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: springboot-test-exam1</span><br><span class="line">  datasource:</span><br><span class="line">    # 使用阿里的Druid连接池</span><br><span class="line">    type: com.alibaba.druid.pool.DruidDataSource</span><br><span class="line">    driver-class-name: com.mysql.jdbc.Driver</span><br><span class="line">    # 填写你数据库的url、登录名、密码和数据库名</span><br><span class="line">    url: jdbc:mysql://localhost:3306/databaseName?useSSL=false&amp;characterEncoding=utf8</span><br><span class="line">    username: root</span><br><span class="line">    password: root</span><br><span class="line">    druid:</span><br><span class="line">      # 连接池的配置信息</span><br><span class="line">      # 初始化大小，最小，最大</span><br><span class="line">      initial-size: 5</span><br><span class="line">      min-idle: 5</span><br><span class="line">      maxActive: 20</span><br><span class="line">      # 配置获取连接等待超时的时间</span><br><span class="line">      maxWait: 60000</span><br><span class="line">      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span><br><span class="line">      timeBetweenEvictionRunsMillis: 60000</span><br><span class="line">      # 配置一个连接在池中最小生存的时间，单位是毫秒</span><br><span class="line">      minEvictableIdleTimeMillis: 300000</span><br><span class="line">      validationQuery: SELECT 1</span><br><span class="line">      testWhileIdle: true</span><br><span class="line">      testOnBorrow: false</span><br><span class="line">      testOnReturn: false</span><br><span class="line">      # 打开PSCache，并且指定每个连接上PSCache的大小</span><br><span class="line">      poolPreparedStatements: true</span><br><span class="line">      maxPoolPreparedStatementPerConnectionSize: 20</span><br><span class="line">      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，&#x27;wall&#x27;用于防火墙</span><br><span class="line">      filters: stat,wall,slf4j</span><br><span class="line">      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span><br><span class="line">      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000</span><br><span class="line">      # 配置DruidStatFilter</span><br><span class="line">      web-stat-filter:</span><br><span class="line">        enabled: true</span><br><span class="line">        url-pattern: &quot;/*&quot;</span><br><span class="line">        exclusions: &quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br><span class="line">      # 配置DruidStatViewServlet</span><br><span class="line">      stat-view-servlet:</span><br><span class="line">        url-pattern: &quot;/druid/*&quot;</span><br><span class="line">        # IP白名单(没有配置或者为空，则允许所有访问)</span><br><span class="line">        allow: 127.0.0.1,192.168.163.1</span><br><span class="line">        # IP黑名单 (存在共同时，deny优先于allow)</span><br><span class="line">        deny: 192.168.1.73</span><br><span class="line">        #  禁用HTML页面上的“Reset All”功能</span><br><span class="line">        reset-enable: false</span><br><span class="line">        # 登录名</span><br><span class="line">        login-username: admin</span><br><span class="line">        # 登录密码</span><br><span class="line">        login-password: 123456</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
